
BaseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000217c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e4  080024e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080024e4  080024e4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e4  080024e4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080024ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000090  0800257c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0800257c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000437a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eaa  00000000  00000000  0002443a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  000252e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000508  00000000  00000000  00025898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003966  00000000  00000000  00025da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006fb3  00000000  00000000  00029706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a044  00000000  00000000  000306b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008a6fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e8  00000000  00000000  0008a750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0008c938  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0008c95c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080022f4 	.word	0x080022f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080022f4 	.word	0x080022f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000270:	b480      	push	{r7}
 8000272:	b08b      	sub	sp, #44	; 0x2c
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000298:	4b8b      	ldr	r3, [pc, #556]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	f003 030c 	and.w	r3, r3, #12
 80002a0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	2b08      	cmp	r3, #8
 80002a6:	d011      	beq.n	80002cc <RCC_GetClocksFreq+0x5c>
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b08      	cmp	r3, #8
 80002ac:	d837      	bhi.n	800031e <RCC_GetClocksFreq+0xae>
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d003      	beq.n	80002bc <RCC_GetClocksFreq+0x4c>
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d004      	beq.n	80002c4 <RCC_GetClocksFreq+0x54>
 80002ba:	e030      	b.n	800031e <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a83      	ldr	r2, [pc, #524]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 80002c0:	601a      	str	r2, [r3, #0]
      break;
 80002c2:	e030      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a81      	ldr	r2, [pc, #516]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 80002c8:	601a      	str	r2, [r3, #0]
      break;
 80002ca:	e02c      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002cc:	4b7e      	ldr	r3, [pc, #504]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80002d4:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002d6:	4b7c      	ldr	r3, [pc, #496]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002de:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	0c9b      	lsrs	r3, r3, #18
 80002e4:	3302      	adds	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 80002e8:	69bb      	ldr	r3, [r7, #24]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4a77      	ldr	r2, [pc, #476]	; (80004d0 <RCC_GetClocksFreq+0x260>)
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e00d      	b.n	8000316 <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80002fa:	4b73      	ldr	r3, [pc, #460]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80002fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3301      	adds	r3, #1
 8000304:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000306:	4a71      	ldr	r2, [pc, #452]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fbb2 f2f3 	udiv	r2, r2, r3
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800031a:	601a      	str	r2, [r3, #0]
      break;
 800031c:	e003      	b.n	8000326 <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a6a      	ldr	r2, [pc, #424]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000326:	4b68      	ldr	r3, [pc, #416]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800032e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	091b      	lsrs	r3, r3, #4
 8000334:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8000336:	4a67      	ldr	r2, [pc, #412]	; (80004d4 <RCC_GetClocksFreq+0x264>)
 8000338:	6a3b      	ldr	r3, [r7, #32]
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	40da      	lsrs	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800034e:	4b5e      	ldr	r3, [pc, #376]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000356:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 8000358:	6a3b      	ldr	r3, [r7, #32]
 800035a:	0a1b      	lsrs	r3, r3, #8
 800035c:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800035e:	4a5d      	ldr	r2, [pc, #372]	; (80004d4 <RCC_GetClocksFreq+0x264>)
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	40da      	lsrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000376:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800037e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	0adb      	lsrs	r3, r3, #11
 8000384:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 8000386:	4a53      	ldr	r2, [pc, #332]	; (80004d4 <RCC_GetClocksFreq+0x264>)
 8000388:	6a3b      	ldr	r3, [r7, #32]
 800038a:	4413      	add	r3, r2
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	40da      	lsrs	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 800039e:	4b4a      	ldr	r3, [pc, #296]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80003a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80003a6:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80003a8:	6a3b      	ldr	r3, [r7, #32]
 80003aa:	091b      	lsrs	r3, r3, #4
 80003ac:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ae:	4a4a      	ldr	r2, [pc, #296]	; (80004d8 <RCC_GetClocksFreq+0x268>)
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d006      	beq.n	80003d2 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80003c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003c6:	693b      	ldr	r3, [r7, #16]
 80003c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	e003      	b.n	80003da <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 80003da:	4b3b      	ldr	r3, [pc, #236]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80003dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003de:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80003e2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	0a5b      	lsrs	r3, r3, #9
 80003e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80003ea:	4a3b      	ldr	r2, [pc, #236]	; (80004d8 <RCC_GetClocksFreq+0x268>)
 80003ec:	6a3b      	ldr	r3, [r7, #32]
 80003ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d006      	beq.n	800040e <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	fbb2 f2f3 	udiv	r2, r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	e003      	b.n	8000416 <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000416:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	f003 0310 	and.w	r3, r3, #16
 800041e:	2b10      	cmp	r3, #16
 8000420:	d003      	beq.n	800042a <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a29      	ldr	r2, [pc, #164]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	e003      	b.n	8000432 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000432:	4b25      	ldr	r3, [pc, #148]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	2b20      	cmp	r3, #32
 800043c:	d003      	beq.n	8000446 <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <RCC_GetClocksFreq+0x25c>)
 8000442:	61da      	str	r2, [r3, #28]
 8000444:	e003      	b.n	800044e <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800044e:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800045a:	d10d      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000462:	429a      	cmp	r2, r3
 8000464:	d108      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	429a      	cmp	r2, r3
 800046c:	d104      	bne.n	8000478 <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 800046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000470:	005a      	lsls	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	621a      	str	r2, [r3, #32]
 8000476:	e003      	b.n	8000480 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048c:	d10d      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000494:	429a      	cmp	r2, r3
 8000496:	d108      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	429a      	cmp	r2, r3
 800049e:	d104      	bne.n	80004aa <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	005a      	lsls	r2, r3, #1
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	625a      	str	r2, [r3, #36]	; 0x24
 80004a8:	e003      	b.n	80004b2 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <RCC_GetClocksFreq+0x258>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	f003 0303 	and.w	r3, r3, #3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d10e      	bne.n	80004dc <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
 80004c6:	e028      	b.n	800051a <RCC_GetClocksFreq+0x2aa>
 80004c8:	40021000 	.word	0x40021000
 80004cc:	007a1200 	.word	0x007a1200
 80004d0:	003d0900 	.word	0x003d0900
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80004dc:	4b6c      	ldr	r3, [pc, #432]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	f003 0303 	and.w	r3, r3, #3
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d104      	bne.n	80004f2 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28
 80004f0:	e013      	b.n	800051a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80004f2:	4b67      	ldr	r3, [pc, #412]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0303 	and.w	r3, r3, #3
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	d104      	bne.n	8000508 <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000504:	629a      	str	r2, [r3, #40]	; 0x28
 8000506:	e008      	b.n	800051a <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000508:	4b61      	ldr	r3, [pc, #388]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	2b03      	cmp	r3, #3
 8000512:	d102      	bne.n	800051a <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a5f      	ldr	r2, [pc, #380]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 800051a:	4b5d      	ldr	r3, [pc, #372]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000522:	2b00      	cmp	r3, #0
 8000524:	d104      	bne.n	8000530 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	62da      	str	r2, [r3, #44]	; 0x2c
 800052e:	e021      	b.n	8000574 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000530:	4b57      	ldr	r3, [pc, #348]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053c:	d104      	bne.n	8000548 <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
 8000546:	e015      	b.n	8000574 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000548:	4b51      	ldr	r3, [pc, #324]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000554:	d104      	bne.n	8000560 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
 800055e:	e009      	b.n	8000574 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000560:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800056c:	d102      	bne.n	8000574 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a48      	ldr	r2, [pc, #288]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000574:	4b46      	ldr	r3, [pc, #280]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d104      	bne.n	800058a <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
 8000588:	e021      	b.n	80005ce <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000596:	d104      	bne.n	80005a2 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
 80005a0:	e015      	b.n	80005ce <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80005a2:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005ae:	d104      	bne.n	80005ba <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
 80005b8:	e009      	b.n	80005ce <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80005c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005c6:	d102      	bne.n	80005ce <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a32      	ldr	r2, [pc, #200]	; (8000694 <RCC_GetClocksFreq+0x424>)
 80005cc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 80005ce:	4b30      	ldr	r3, [pc, #192]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d104      	bne.n	80005e4 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
 80005e2:	e021      	b.n	8000628 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80005ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80005f0:	d104      	bne.n	80005fc <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
 80005fa:	e015      	b.n	8000628 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <RCC_GetClocksFreq+0x420>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000608:	d104      	bne.n	8000614 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	e009      	b.n	8000628 <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800061c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000620:	d102      	bne.n	8000628 <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000626:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <RCC_GetClocksFreq+0x420>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000630:	2b00      	cmp	r3, #0
 8000632:	d104      	bne.n	800063e <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 800063c:	e021      	b.n	8000682 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800064a:	d104      	bne.n	8000656 <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000654:	e015      	b.n	8000682 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800065e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000662:	d104      	bne.n	800066e <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800066c:	e009      	b.n	8000682 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <RCC_GetClocksFreq+0x420>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000676:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800067a:	d102      	bne.n	8000682 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <RCC_GetClocksFreq+0x424>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000682:	bf00      	nop
 8000684:	372c      	adds	r7, #44	; 0x2c
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000
 8000694:	007a1200 	.word	0x007a1200

08000698 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 80006ee:	2201      	movs	r2, #1
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d103      	bne.n	8000706 <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3304      	adds	r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e005      	b.n	8000712 <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	2b03      	cmp	r3, #3
 800070a:	d102      	bne.n	8000712 <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3308      	adds	r3, #8
 8000710:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	6819      	ldr	r1, [r3, #0]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000724:	e006      	b.n	8000734 <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43da      	mvns	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	400a      	ands	r2, r1
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	; 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	69da      	ldr	r2, [r3, #28]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	2201      	movs	r2, #1
 8000786:	fa02 f103 	lsl.w	r1, r2, r3
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <NVIC_EnableIRQ+0x30>)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	095b      	lsrs	r3, r3, #5
 8000792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <uart_put_char+0x30>)
 80007ba:	f7ff ff6d 	bl	8000698 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 80007be:	bf00      	nop
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <uart_put_char+0x30>)
 80007c4:	f7ff ffbc 	bl	8000740 <USART_GetFlagStatus>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f8      	beq.n	80007c0 <uart_put_char+0x18>
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40004400 	.word	0x40004400

080007dc <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e012      	b.n	8000816 <_write_r+0x3a>
        if (ptr[n] == '\n') {
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b0a      	cmp	r3, #10
 80007fa:	d102      	bne.n	8000802 <_write_r+0x26>
            uart_put_char('\r');
 80007fc:	200d      	movs	r0, #13
 80007fe:	f7ff ffd3 	bl	80007a8 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ffcc 	bl	80007a8 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbe8      	blt.n	80007f0 <_write_r+0x14>
    }

    return len;
 800081e:	683b      	ldr	r3, [r7, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000830:	4b86      	ldr	r3, [pc, #536]	; (8000a4c <uart_init+0x224>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fc29 	bl	8001090 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 800083e:	4b83      	ldr	r3, [pc, #524]	; (8000a4c <uart_init+0x224>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fc22 	bl	8001090 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 800084c:	4b80      	ldr	r3, [pc, #512]	; (8000a50 <uart_init+0x228>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a7f      	ldr	r2, [pc, #508]	; (8000a50 <uart_init+0x228>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000858:	4b7d      	ldr	r3, [pc, #500]	; (8000a50 <uart_init+0x228>)
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	4a7c      	ldr	r2, [pc, #496]	; (8000a50 <uart_init+0x228>)
 800085e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000862:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000864:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000868:	6a1b      	ldr	r3, [r3, #32]
 800086a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800086e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000872:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000878:	6a1b      	ldr	r3, [r3, #32]
 800087a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800087e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000882:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800088e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000892:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800089e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80008a2:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 80008a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008b2:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 80008b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008be:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80008c2:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 80008c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008c8:	889b      	ldrh	r3, [r3, #4]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008d0:	f023 030c 	bic.w	r3, r3, #12
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 80008d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008e0:	8892      	ldrh	r2, [r2, #4]
 80008e2:	b292      	uxth	r2, r2
 80008e4:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 80008e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008f4:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 80008f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000900:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000904:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8000906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000914:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8000916:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000920:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000924:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <uart_init+0x22c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <uart_init+0x22c>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 8000932:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <uart_init+0x22c>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a47      	ldr	r2, [pc, #284]	; (8000a54 <uart_init+0x22c>)
 8000938:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800093c:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800093e:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <uart_init+0x22c>)
 8000940:	4a44      	ldr	r2, [pc, #272]	; (8000a54 <uart_init+0x22c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8000946:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <uart_init+0x22c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <uart_init+0x22c>)
 800094c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000950:	f023 030c 	bic.w	r3, r3, #12
 8000954:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 8000956:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <uart_init+0x22c>)
 8000958:	4a3e      	ldr	r2, [pc, #248]	; (8000a54 <uart_init+0x22c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <uart_init+0x22c>)
 8000960:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <uart_init+0x22c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <uart_init+0x22c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <uart_init+0x22c>)
 800096c:	f043 030c 	orr.w	r3, r3, #12
 8000970:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <uart_init+0x22c>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <uart_init+0x22c>)
 8000978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800097c:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <uart_init+0x22c>)
 8000980:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <uart_init+0x22c>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800098a:	2300      	movs	r3, #0
 800098c:	647b      	str	r3, [r7, #68]	; 0x44
 800098e:	2300      	movs	r3, #0
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc6a 	bl	8000270 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 800099c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099e:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <uart_init+0x22c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d010      	beq.n	80009ce <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80009ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ae:	005a      	lsls	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 80009b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	fbb3 f2f2 	udiv	r2, r3, r2
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	fb01 f202 	mul.w	r2, r1, r2
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80009cc:	e00d      	b.n	80009ea <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 80009ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 80009d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	fb01 f202 	mul.w	r2, r1, r2
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d302      	bcc.n	80009fa <uart_init+0x1d2>
        divider++;
 80009f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009f6:	3301      	adds	r3, #1
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <uart_init+0x22c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00b      	beq.n	8000a1e <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8000a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a12:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000a16:	4013      	ands	r3, r2
 8000a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <uart_init+0x22c>)
 8000a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a22:	b292      	uxth	r2, r2
 8000a24:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <uart_init+0x22c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <uart_init+0x22c>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000a32:	2201      	movs	r2, #1
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <uart_init+0x230>)
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <uart_init+0x22c>)
 8000a38:	f7ff fe40 	bl	80006bc <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8000a3c:	2026      	movs	r0, #38	; 0x26
 8000a3e:	f7ff fe99 	bl	8000774 <NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	; 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000002c 	.word	0x2000002c
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40004400 	.word	0x40004400
 8000a58:	00050105 	.word	0x00050105

08000a5c <fgcolor>:
#define ESC 0x1B
#include "ansi.h"
#include "stdio.h"
#include "stdint.h"

void fgcolor(uint8_t foreground) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
      4        Blue            12       Light Blue
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/
  uint8_t type = 22;             // normal text
 8000a66:	2316      	movs	r3, #22
 8000a68:	73fb      	strb	r3, [r7, #15]
	if (foreground > 7) {
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d904      	bls.n	8000a7a <fgcolor+0x1e>
	  type = 1;                // bold text
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
		foreground -= 8;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	3b08      	subs	r3, #8
 8000a78:	71fb      	strb	r3, [r7, #7]
	}
  printf("%c[%d;%dm", ESC, type, foreground+30);
 8000a7a:	7bfa      	ldrb	r2, [r7, #15]
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	331e      	adds	r3, #30
 8000a80:	211b      	movs	r1, #27
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <fgcolor+0x34>)
 8000a84:	f000 fa6a 	bl	8000f5c <iprintf>
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	0800230c 	.word	0x0800230c

08000a94 <moveToXY>:
// gray on black text, no underline, no blink, no reverse
  printf("%c[m", ESC);
}

//Cursor Controls
void moveToXY(int x, int y){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
	printf("%c[%d;%dH",ESC,x,y);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	211b      	movs	r1, #27
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <moveToXY+0x20>)
 8000aa6:	f000 fa59 	bl	8000f5c <iprintf>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	08002338 	.word	0x08002338

08000ab8 <clearScreenResCurser>:

//Erase functions
void clearCursorToEnd(){
	printf("%c[J",ESC);
}
void clearScreenResCurser(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	printf("%c[2J",ESC);
 8000abc:	211b      	movs	r1, #27
 8000abe:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <clearScreenResCurser+0x10>)
 8000ac0:	f000 fa4c 	bl	8000f5c <iprintf>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	08002384 	.word	0x08002384

08000acc <main>:
#include <sin.h>
#include "charset.h"
#include "visuals.h"


int main(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0ca      	sub	sp, #296	; 0x128
 8000ad0:	af00      	add	r7, sp, #0
	uart_init(256000);
 8000ad2:	f44f 307a 	mov.w	r0, #256000	; 0x3e800
 8000ad6:	f7ff fea7 	bl	8000828 <uart_init>
	printf("\n");
 8000ada:	200a      	movs	r0, #10
 8000adc:	f000 fa56 	bl	8000f8c <putchar>
	//lcdCommunication();


	//Project start
	int tHeight[73];
	initHeight(tHeight,73);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2149      	movs	r1, #73	; 0x49
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f95f 	bl	8000da8 <initHeight>
	clearScreenResCurser();
 8000aea:	f7ff ffe5 	bl	8000ab8 <clearScreenResCurser>
	//drawTerrain(10,12,tHeight);
	//drawBox(7,10,7);
	//drawBox(7,10,7);
	tank(160,15,15);
 8000aee:	220f      	movs	r2, #15
 8000af0:	210f      	movs	r1, #15
 8000af2:	20a0      	movs	r0, #160	; 0xa0
 8000af4:	f000 f9a9 	bl	8000e4a <tank>

	while(1){}
 8000af8:	e7fe      	b.n	8000af8 <main+0x2c>

08000afa <getRand>:
#include <stdlib.h>
#include <sin.h>
#include "charset.h"
#include "random.h"

int getRand(int lowerLimit,int upperLimit){
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	srand(time(NULL));
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 fb91 	bl	800122c <time>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	4613      	mov	r3, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fa51 	bl	8000fb8 <srand>
	lowerLimit++;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
	int r =  lowerLimit + rand() % (upperLimit - lowerLimit);
 8000b1c:	f000 fa7a 	bl	8001014 <rand>
 8000b20:	4602      	mov	r2, r0
 8000b22:	6839      	ldr	r1, [r7, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1acb      	subs	r3, r1, r3
 8000b28:	fb92 f1f3 	sdiv	r1, r2, r3
 8000b2c:	fb01 f303 	mul.w	r3, r1, r3
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
	return r;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_kill>:

int _kill(int pid, int sig)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b5c:	f000 f9cc 	bl	8000ef8 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2216      	movs	r2, #22
 8000b64:	601a      	str	r2, [r3, #0]
	return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_exit>:

void _exit (int status)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffe7 	bl	8000b52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b84:	e7fe      	b.n	8000b84 <_exit+0x12>

08000b86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00a      	b.n	8000bae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b98:	f3af 8000 	nop.w
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	60ba      	str	r2, [r7, #8]
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbf0      	blt.n	8000b98 <_read+0x12>
	}

return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be8:	605a      	str	r2, [r3, #4]
	return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_isatty>:

int _isatty(int file)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
	return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x50>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x16>
		heap_end = &end;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <_sbrk+0x50>)
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <_sbrk+0x54>)
 8000c3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <_sbrk+0x50>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <_sbrk+0x50>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	466a      	mov	r2, sp
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d907      	bls.n	8000c62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c52:	f000 f951 	bl	8000ef8 <__errno>
 8000c56:	4603      	mov	r3, r0
 8000c58:	220c      	movs	r2, #12
 8000c5a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	e006      	b.n	8000c70 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <_sbrk+0x50>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <_sbrk+0x50>)
 8000c6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000ac 	.word	0x200000ac
 8000c7c:	200000c0 	.word	0x200000c0

08000c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <SystemInit+0x84>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	; (8000d04 <SystemInit+0x84>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <SystemInit+0x88>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <SystemInit+0x88>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <SystemInit+0x88>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	4918      	ldr	r1, [pc, #96]	; (8000d08 <SystemInit+0x88>)
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <SystemInit+0x8c>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <SystemInit+0x88>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <SystemInit+0x88>)
 8000cb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <SystemInit+0x88>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <SystemInit+0x88>)
 8000cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <SystemInit+0x88>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <SystemInit+0x88>)
 8000cce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cd2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <SystemInit+0x88>)
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <SystemInit+0x88>)
 8000cda:	f023 030f 	bic.w	r3, r3, #15
 8000cde:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <SystemInit+0x88>)
 8000ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce4:	4908      	ldr	r1, [pc, #32]	; (8000d08 <SystemInit+0x88>)
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <SystemInit+0x90>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x88>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000cf2:	f000 f80f 	bl	8000d14 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cf6:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <SystemInit+0x84>)
 8000cf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfc:	609a      	str	r2, [r3, #8]
#endif  
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	f87fc00c 	.word	0xf87fc00c
 8000d10:	ff00fccc 	.word	0xff00fccc

08000d14 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <SetSysClock+0x8c>)
 8000d1a:	2212      	movs	r2, #18
 8000d1c:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <SetSysClock+0x90>)
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <SetSysClock+0x90>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <SetSysClock+0x90>)
 8000d28:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <SetSysClock+0x90>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <SetSysClock+0x90>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <SetSysClock+0x90>)
 8000d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d38:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <SetSysClock+0x90>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <SetSysClock+0x90>)
 8000d40:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000d44:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <SetSysClock+0x90>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <SetSysClock+0x90>)
 8000d4c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000d50:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <SetSysClock+0x90>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <SetSysClock+0x90>)
 8000d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d5e:	bf00      	nop
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <SetSysClock+0x90>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f9      	beq.n	8000d60 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <SetSysClock+0x90>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <SetSysClock+0x90>)
 8000d72:	f023 0303 	bic.w	r3, r3, #3
 8000d76:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <SetSysClock+0x90>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <SetSysClock+0x90>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000d84:	bf00      	nop
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <SetSysClock+0x90>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d1f9      	bne.n	8000d86 <SetSysClock+0x72>
  {
  }
}
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000
 8000da4:	40021000 	.word	0x40021000

08000da8 <initHeight>:
      5        Purple          13       Light Purple
      6        Cyan            14       Light Cyan
      7        Light Gray      15       White
*/

void initHeight(int arr[],int size){
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	arr[0] = getRand(1,3);
 8000db2:	2103      	movs	r1, #3
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fea0 	bl	8000afa <getRand>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < size; i++){
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	e016      	b.n	8000df4 <initHeight+0x4c>
		arr[i] = arr[i-1] + getRand(-1,1);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	681c      	ldr	r4, [r3, #0]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff fe8d 	bl	8000afa <getRand>
 8000de0:	4601      	mov	r1, r0
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	1862      	adds	r2, r4, r1
 8000dec:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < size; i++){
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbe4      	blt.n	8000dc6 <initHeight+0x1e>
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}

08000e06 <smallBox>:
			moveToXY(i,j);
			printf("%c",219);
		}
	}
}
void smallBox(int yPos, int xPos, int color){
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int i;
	fgcolor(color);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe20 	bl	8000a5c <fgcolor>
	for( i = yPos; i < yPos + 2; i++){
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e009      	b.n	8000e36 <smallBox+0x30>
		moveToXY(xPos,i);
 8000e22:	6979      	ldr	r1, [r7, #20]
 8000e24:	68b8      	ldr	r0, [r7, #8]
 8000e26:	f7ff fe35 	bl	8000a94 <moveToXY>
		printf("%c",219);
 8000e2a:	20db      	movs	r0, #219	; 0xdb
 8000e2c:	f000 f8ae 	bl	8000f8c <putchar>
	for( i = yPos; i < yPos + 2; i++){
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	ddf0      	ble.n	8000e22 <smallBox+0x1c>

	}
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <tank>:
void tank(int angle, int groundHeight, int xPos){
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
	smallBox(xPos,groundHeight,2);
 8000e56:	2202      	movs	r2, #2
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffd3 	bl	8000e06 <smallBox>
	smallBox(xPos+2,groundHeight-1,2);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	1c98      	adds	r0, r3, #2
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff ffcb 	bl	8000e06 <smallBox>
	smallBox(xPos+4,groundHeight,2);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3304      	adds	r3, #4
 8000e74:	2202      	movs	r2, #2
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ffc4 	bl	8000e06 <smallBox>
	smallBox(xPos+2,groundHeight,2);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3302      	adds	r3, #2
 8000e82:	2202      	movs	r2, #2
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffbd 	bl	8000e06 <smallBox>
	smallBox(xPos+4,groundHeight-1,1);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1d18      	adds	r0, r3, #4
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff ffb5 	bl	8000e06 <smallBox>
	} else if(angle > 180){
		angle = 180;
	} else{
		angle = 0;
	}*/
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <LoopForever+0xe>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec0:	4c0b      	ldr	r4, [pc, #44]	; (8000ef0 <LoopForever+0x16>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ece:	f7ff fed7 	bl	8000c80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ed2:	f000 f817 	bl	8000f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fdf9 	bl	8000acc <main>

08000eda <LoopForever>:

LoopForever:
    b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   r0, =_estack
 8000edc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ee8:	080024ec 	.word	0x080024ec
  ldr r2, =_sbss
 8000eec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ef0:	200000c0 	.word	0x200000c0

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <__errno>:
 8000ef8:	4b01      	ldr	r3, [pc, #4]	; (8000f00 <__errno+0x8>)
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000002c 	.word	0x2000002c

08000f04 <__libc_init_array>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	4d0d      	ldr	r5, [pc, #52]	; (8000f3c <__libc_init_array+0x38>)
 8000f08:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__libc_init_array+0x3c>)
 8000f0a:	1b64      	subs	r4, r4, r5
 8000f0c:	10a4      	asrs	r4, r4, #2
 8000f0e:	2600      	movs	r6, #0
 8000f10:	42a6      	cmp	r6, r4
 8000f12:	d109      	bne.n	8000f28 <__libc_init_array+0x24>
 8000f14:	4d0b      	ldr	r5, [pc, #44]	; (8000f44 <__libc_init_array+0x40>)
 8000f16:	4c0c      	ldr	r4, [pc, #48]	; (8000f48 <__libc_init_array+0x44>)
 8000f18:	f001 f9ec 	bl	80022f4 <_init>
 8000f1c:	1b64      	subs	r4, r4, r5
 8000f1e:	10a4      	asrs	r4, r4, #2
 8000f20:	2600      	movs	r6, #0
 8000f22:	42a6      	cmp	r6, r4
 8000f24:	d105      	bne.n	8000f32 <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2c:	4798      	blx	r3
 8000f2e:	3601      	adds	r6, #1
 8000f30:	e7ee      	b.n	8000f10 <__libc_init_array+0xc>
 8000f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f36:	4798      	blx	r3
 8000f38:	3601      	adds	r6, #1
 8000f3a:	e7f2      	b.n	8000f22 <__libc_init_array+0x1e>
 8000f3c:	080024e4 	.word	0x080024e4
 8000f40:	080024e4 	.word	0x080024e4
 8000f44:	080024e4 	.word	0x080024e4
 8000f48:	080024e8 	.word	0x080024e8

08000f4c <memset>:
 8000f4c:	4402      	add	r2, r0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d100      	bne.n	8000f56 <memset+0xa>
 8000f54:	4770      	bx	lr
 8000f56:	f803 1b01 	strb.w	r1, [r3], #1
 8000f5a:	e7f9      	b.n	8000f50 <memset+0x4>

08000f5c <iprintf>:
 8000f5c:	b40f      	push	{r0, r1, r2, r3}
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <iprintf+0x2c>)
 8000f60:	b513      	push	{r0, r1, r4, lr}
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	b124      	cbz	r4, 8000f70 <iprintf+0x14>
 8000f66:	69a3      	ldr	r3, [r4, #24]
 8000f68:	b913      	cbnz	r3, 8000f70 <iprintf+0x14>
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f000 fab0 	bl	80014d0 <__sinit>
 8000f70:	ab05      	add	r3, sp, #20
 8000f72:	9a04      	ldr	r2, [sp, #16]
 8000f74:	68a1      	ldr	r1, [r4, #8]
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f000 fce5 	bl	8001948 <_vfiprintf_r>
 8000f7e:	b002      	add	sp, #8
 8000f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr
 8000f88:	2000002c 	.word	0x2000002c

08000f8c <putchar>:
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <putchar+0x28>)
 8000f8e:	b513      	push	{r0, r1, r4, lr}
 8000f90:	681c      	ldr	r4, [r3, #0]
 8000f92:	4601      	mov	r1, r0
 8000f94:	b134      	cbz	r4, 8000fa4 <putchar+0x18>
 8000f96:	69a3      	ldr	r3, [r4, #24]
 8000f98:	b923      	cbnz	r3, 8000fa4 <putchar+0x18>
 8000f9a:	9001      	str	r0, [sp, #4]
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f000 fa97 	bl	80014d0 <__sinit>
 8000fa2:	9901      	ldr	r1, [sp, #4]
 8000fa4:	68a2      	ldr	r2, [r4, #8]
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	b002      	add	sp, #8
 8000faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fae:	f000 bf8f 	b.w	8001ed0 <_putc_r>
 8000fb2:	bf00      	nop
 8000fb4:	2000002c 	.word	0x2000002c

08000fb8 <srand>:
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <srand+0x44>)
 8000fbc:	681d      	ldr	r5, [r3, #0]
 8000fbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	b9b3      	cbnz	r3, 8000ff2 <srand+0x3a>
 8000fc4:	2018      	movs	r0, #24
 8000fc6:	f000 fbad 	bl	8001724 <malloc>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	63a8      	str	r0, [r5, #56]	; 0x38
 8000fce:	b920      	cbnz	r0, 8000fda <srand+0x22>
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <srand+0x48>)
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <srand+0x4c>)
 8000fd4:	2142      	movs	r1, #66	; 0x42
 8000fd6:	f000 f943 	bl	8001260 <__assert_func>
 8000fda:	490b      	ldr	r1, [pc, #44]	; (8001008 <srand+0x50>)
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <srand+0x54>)
 8000fde:	e9c0 1300 	strd	r1, r3, [r0]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <srand+0x58>)
 8000fe4:	6083      	str	r3, [r0, #8]
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	8183      	strh	r3, [r0, #12]
 8000fea:	2100      	movs	r1, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000ff2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611c      	str	r4, [r3, #16]
 8000ff8:	615a      	str	r2, [r3, #20]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	2000002c 	.word	0x2000002c
 8001000:	080023a0 	.word	0x080023a0
 8001004:	080023b7 	.word	0x080023b7
 8001008:	abcd330e 	.word	0xabcd330e
 800100c:	e66d1234 	.word	0xe66d1234
 8001010:	0005deec 	.word	0x0005deec

08001014 <rand>:
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <rand+0x5c>)
 8001016:	b510      	push	{r4, lr}
 8001018:	681c      	ldr	r4, [r3, #0]
 800101a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800101c:	b9b3      	cbnz	r3, 800104c <rand+0x38>
 800101e:	2018      	movs	r0, #24
 8001020:	f000 fb80 	bl	8001724 <malloc>
 8001024:	63a0      	str	r0, [r4, #56]	; 0x38
 8001026:	b928      	cbnz	r0, 8001034 <rand+0x20>
 8001028:	4602      	mov	r2, r0
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <rand+0x60>)
 800102c:	4812      	ldr	r0, [pc, #72]	; (8001078 <rand+0x64>)
 800102e:	214e      	movs	r1, #78	; 0x4e
 8001030:	f000 f916 	bl	8001260 <__assert_func>
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <rand+0x68>)
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <rand+0x6c>)
 8001038:	e9c0 2300 	strd	r2, r3, [r0]
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <rand+0x70>)
 800103e:	6083      	str	r3, [r0, #8]
 8001040:	230b      	movs	r3, #11
 8001042:	8183      	strh	r3, [r0, #12]
 8001044:	2201      	movs	r2, #1
 8001046:	2300      	movs	r3, #0
 8001048:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800104c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <rand+0x74>)
 8001050:	6920      	ldr	r0, [r4, #16]
 8001052:	6963      	ldr	r3, [r4, #20]
 8001054:	490d      	ldr	r1, [pc, #52]	; (800108c <rand+0x78>)
 8001056:	4342      	muls	r2, r0
 8001058:	fb01 2203 	mla	r2, r1, r3, r2
 800105c:	fba0 0101 	umull	r0, r1, r0, r1
 8001060:	1c43      	adds	r3, r0, #1
 8001062:	eb42 0001 	adc.w	r0, r2, r1
 8001066:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800106a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bd10      	pop	{r4, pc}
 8001070:	2000002c 	.word	0x2000002c
 8001074:	080023a0 	.word	0x080023a0
 8001078:	080023b7 	.word	0x080023b7
 800107c:	abcd330e 	.word	0xabcd330e
 8001080:	e66d1234 	.word	0xe66d1234
 8001084:	0005deec 	.word	0x0005deec
 8001088:	5851f42d 	.word	0x5851f42d
 800108c:	4c957f2d 	.word	0x4c957f2d

08001090 <setbuf>:
 8001090:	2900      	cmp	r1, #0
 8001092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001096:	bf0c      	ite	eq
 8001098:	2202      	moveq	r2, #2
 800109a:	2200      	movne	r2, #0
 800109c:	f000 b800 	b.w	80010a0 <setvbuf>

080010a0 <setvbuf>:
 80010a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80010a4:	461d      	mov	r5, r3
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <setvbuf+0x17c>)
 80010a8:	681f      	ldr	r7, [r3, #0]
 80010aa:	4604      	mov	r4, r0
 80010ac:	460e      	mov	r6, r1
 80010ae:	4690      	mov	r8, r2
 80010b0:	b127      	cbz	r7, 80010bc <setvbuf+0x1c>
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	b913      	cbnz	r3, 80010bc <setvbuf+0x1c>
 80010b6:	4638      	mov	r0, r7
 80010b8:	f000 fa0a 	bl	80014d0 <__sinit>
 80010bc:	4b58      	ldr	r3, [pc, #352]	; (8001220 <setvbuf+0x180>)
 80010be:	429c      	cmp	r4, r3
 80010c0:	d167      	bne.n	8001192 <setvbuf+0xf2>
 80010c2:	687c      	ldr	r4, [r7, #4]
 80010c4:	f1b8 0f02 	cmp.w	r8, #2
 80010c8:	d006      	beq.n	80010d8 <setvbuf+0x38>
 80010ca:	f1b8 0f01 	cmp.w	r8, #1
 80010ce:	f200 809f 	bhi.w	8001210 <setvbuf+0x170>
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	f2c0 809c 	blt.w	8001210 <setvbuf+0x170>
 80010d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010da:	07db      	lsls	r3, r3, #31
 80010dc:	d405      	bmi.n	80010ea <setvbuf+0x4a>
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	0598      	lsls	r0, r3, #22
 80010e2:	d402      	bmi.n	80010ea <setvbuf+0x4a>
 80010e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010e6:	f000 fab6 	bl	8001656 <__retarget_lock_acquire_recursive>
 80010ea:	4621      	mov	r1, r4
 80010ec:	4638      	mov	r0, r7
 80010ee:	f000 f95b 	bl	80013a8 <_fflush_r>
 80010f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010f4:	b141      	cbz	r1, 8001108 <setvbuf+0x68>
 80010f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010fa:	4299      	cmp	r1, r3
 80010fc:	d002      	beq.n	8001104 <setvbuf+0x64>
 80010fe:	4638      	mov	r0, r7
 8001100:	f000 fb18 	bl	8001734 <_free_r>
 8001104:	2300      	movs	r3, #0
 8001106:	6363      	str	r3, [r4, #52]	; 0x34
 8001108:	2300      	movs	r3, #0
 800110a:	61a3      	str	r3, [r4, #24]
 800110c:	6063      	str	r3, [r4, #4]
 800110e:	89a3      	ldrh	r3, [r4, #12]
 8001110:	0619      	lsls	r1, r3, #24
 8001112:	d503      	bpl.n	800111c <setvbuf+0x7c>
 8001114:	6921      	ldr	r1, [r4, #16]
 8001116:	4638      	mov	r0, r7
 8001118:	f000 fb0c 	bl	8001734 <_free_r>
 800111c:	89a3      	ldrh	r3, [r4, #12]
 800111e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f1b8 0f02 	cmp.w	r8, #2
 800112a:	81a3      	strh	r3, [r4, #12]
 800112c:	d06c      	beq.n	8001208 <setvbuf+0x168>
 800112e:	ab01      	add	r3, sp, #4
 8001130:	466a      	mov	r2, sp
 8001132:	4621      	mov	r1, r4
 8001134:	4638      	mov	r0, r7
 8001136:	f000 fa90 	bl	800165a <__swhatbuf_r>
 800113a:	89a3      	ldrh	r3, [r4, #12]
 800113c:	4318      	orrs	r0, r3
 800113e:	81a0      	strh	r0, [r4, #12]
 8001140:	2d00      	cmp	r5, #0
 8001142:	d130      	bne.n	80011a6 <setvbuf+0x106>
 8001144:	9d00      	ldr	r5, [sp, #0]
 8001146:	4628      	mov	r0, r5
 8001148:	f000 faec 	bl	8001724 <malloc>
 800114c:	4606      	mov	r6, r0
 800114e:	2800      	cmp	r0, #0
 8001150:	d155      	bne.n	80011fe <setvbuf+0x15e>
 8001152:	f8dd 9000 	ldr.w	r9, [sp]
 8001156:	45a9      	cmp	r9, r5
 8001158:	d14a      	bne.n	80011f0 <setvbuf+0x150>
 800115a:	f04f 35ff 	mov.w	r5, #4294967295
 800115e:	2200      	movs	r2, #0
 8001160:	60a2      	str	r2, [r4, #8]
 8001162:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001166:	6022      	str	r2, [r4, #0]
 8001168:	6122      	str	r2, [r4, #16]
 800116a:	2201      	movs	r2, #1
 800116c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001170:	6162      	str	r2, [r4, #20]
 8001172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	07d2      	lsls	r2, r2, #31
 800117a:	81a3      	strh	r3, [r4, #12]
 800117c:	d405      	bmi.n	800118a <setvbuf+0xea>
 800117e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001182:	d102      	bne.n	800118a <setvbuf+0xea>
 8001184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001186:	f000 fa67 	bl	8001658 <__retarget_lock_release_recursive>
 800118a:	4628      	mov	r0, r5
 800118c:	b003      	add	sp, #12
 800118e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <setvbuf+0x184>)
 8001194:	429c      	cmp	r4, r3
 8001196:	d101      	bne.n	800119c <setvbuf+0xfc>
 8001198:	68bc      	ldr	r4, [r7, #8]
 800119a:	e793      	b.n	80010c4 <setvbuf+0x24>
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <setvbuf+0x188>)
 800119e:	429c      	cmp	r4, r3
 80011a0:	bf08      	it	eq
 80011a2:	68fc      	ldreq	r4, [r7, #12]
 80011a4:	e78e      	b.n	80010c4 <setvbuf+0x24>
 80011a6:	2e00      	cmp	r6, #0
 80011a8:	d0cd      	beq.n	8001146 <setvbuf+0xa6>
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	b913      	cbnz	r3, 80011b4 <setvbuf+0x114>
 80011ae:	4638      	mov	r0, r7
 80011b0:	f000 f98e 	bl	80014d0 <__sinit>
 80011b4:	f1b8 0f01 	cmp.w	r8, #1
 80011b8:	bf08      	it	eq
 80011ba:	89a3      	ldrheq	r3, [r4, #12]
 80011bc:	6026      	str	r6, [r4, #0]
 80011be:	bf04      	itt	eq
 80011c0:	f043 0301 	orreq.w	r3, r3, #1
 80011c4:	81a3      	strheq	r3, [r4, #12]
 80011c6:	89a2      	ldrh	r2, [r4, #12]
 80011c8:	f012 0308 	ands.w	r3, r2, #8
 80011cc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80011d0:	d01c      	beq.n	800120c <setvbuf+0x16c>
 80011d2:	07d3      	lsls	r3, r2, #31
 80011d4:	bf41      	itttt	mi
 80011d6:	2300      	movmi	r3, #0
 80011d8:	426d      	negmi	r5, r5
 80011da:	60a3      	strmi	r3, [r4, #8]
 80011dc:	61a5      	strmi	r5, [r4, #24]
 80011de:	bf58      	it	pl
 80011e0:	60a5      	strpl	r5, [r4, #8]
 80011e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80011e4:	f015 0501 	ands.w	r5, r5, #1
 80011e8:	d115      	bne.n	8001216 <setvbuf+0x176>
 80011ea:	f412 7f00 	tst.w	r2, #512	; 0x200
 80011ee:	e7c8      	b.n	8001182 <setvbuf+0xe2>
 80011f0:	4648      	mov	r0, r9
 80011f2:	f000 fa97 	bl	8001724 <malloc>
 80011f6:	4606      	mov	r6, r0
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d0ae      	beq.n	800115a <setvbuf+0xba>
 80011fc:	464d      	mov	r5, r9
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	81a3      	strh	r3, [r4, #12]
 8001206:	e7d0      	b.n	80011aa <setvbuf+0x10a>
 8001208:	2500      	movs	r5, #0
 800120a:	e7a8      	b.n	800115e <setvbuf+0xbe>
 800120c:	60a3      	str	r3, [r4, #8]
 800120e:	e7e8      	b.n	80011e2 <setvbuf+0x142>
 8001210:	f04f 35ff 	mov.w	r5, #4294967295
 8001214:	e7b9      	b.n	800118a <setvbuf+0xea>
 8001216:	2500      	movs	r5, #0
 8001218:	e7b7      	b.n	800118a <setvbuf+0xea>
 800121a:	bf00      	nop
 800121c:	2000002c 	.word	0x2000002c
 8001220:	08002470 	.word	0x08002470
 8001224:	08002490 	.word	0x08002490
 8001228:	08002450 	.word	0x08002450

0800122c <time>:
 800122c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <time+0x30>)
 8001230:	2200      	movs	r2, #0
 8001232:	4669      	mov	r1, sp
 8001234:	4604      	mov	r4, r0
 8001236:	6818      	ldr	r0, [r3, #0]
 8001238:	f000 f9fa 	bl	8001630 <_gettimeofday_r>
 800123c:	2800      	cmp	r0, #0
 800123e:	bfbe      	ittt	lt
 8001240:	f04f 32ff 	movlt.w	r2, #4294967295
 8001244:	f04f 33ff 	movlt.w	r3, #4294967295
 8001248:	e9cd 2300 	strdlt	r2, r3, [sp]
 800124c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001250:	b10c      	cbz	r4, 8001256 <time+0x2a>
 8001252:	e9c4 0100 	strd	r0, r1, [r4]
 8001256:	b004      	add	sp, #16
 8001258:	bd10      	pop	{r4, pc}
 800125a:	bf00      	nop
 800125c:	2000002c 	.word	0x2000002c

08001260 <__assert_func>:
 8001260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001262:	4614      	mov	r4, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <__assert_func+0x2c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4605      	mov	r5, r0
 800126c:	68d8      	ldr	r0, [r3, #12]
 800126e:	b14c      	cbz	r4, 8001284 <__assert_func+0x24>
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <__assert_func+0x30>)
 8001272:	9100      	str	r1, [sp, #0]
 8001274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001278:	4906      	ldr	r1, [pc, #24]	; (8001294 <__assert_func+0x34>)
 800127a:	462b      	mov	r3, r5
 800127c:	f000 f9a6 	bl	80015cc <fiprintf>
 8001280:	f000 ff82 	bl	8002188 <abort>
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__assert_func+0x38>)
 8001286:	461c      	mov	r4, r3
 8001288:	e7f3      	b.n	8001272 <__assert_func+0x12>
 800128a:	bf00      	nop
 800128c:	2000002c 	.word	0x2000002c
 8001290:	08002412 	.word	0x08002412
 8001294:	0800241f 	.word	0x0800241f
 8001298:	0800244d 	.word	0x0800244d

0800129c <__sflush_r>:
 800129c:	898a      	ldrh	r2, [r1, #12]
 800129e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a2:	4605      	mov	r5, r0
 80012a4:	0710      	lsls	r0, r2, #28
 80012a6:	460c      	mov	r4, r1
 80012a8:	d458      	bmi.n	800135c <__sflush_r+0xc0>
 80012aa:	684b      	ldr	r3, [r1, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	dc05      	bgt.n	80012bc <__sflush_r+0x20>
 80012b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	dc02      	bgt.n	80012bc <__sflush_r+0x20>
 80012b6:	2000      	movs	r0, #0
 80012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012be:	2e00      	cmp	r6, #0
 80012c0:	d0f9      	beq.n	80012b6 <__sflush_r+0x1a>
 80012c2:	2300      	movs	r3, #0
 80012c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012c8:	682f      	ldr	r7, [r5, #0]
 80012ca:	602b      	str	r3, [r5, #0]
 80012cc:	d032      	beq.n	8001334 <__sflush_r+0x98>
 80012ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	075a      	lsls	r2, r3, #29
 80012d4:	d505      	bpl.n	80012e2 <__sflush_r+0x46>
 80012d6:	6863      	ldr	r3, [r4, #4]
 80012d8:	1ac0      	subs	r0, r0, r3
 80012da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012dc:	b10b      	cbz	r3, 80012e2 <__sflush_r+0x46>
 80012de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e0:	1ac0      	subs	r0, r0, r3
 80012e2:	2300      	movs	r3, #0
 80012e4:	4602      	mov	r2, r0
 80012e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012e8:	6a21      	ldr	r1, [r4, #32]
 80012ea:	4628      	mov	r0, r5
 80012ec:	47b0      	blx	r6
 80012ee:	1c43      	adds	r3, r0, #1
 80012f0:	89a3      	ldrh	r3, [r4, #12]
 80012f2:	d106      	bne.n	8001302 <__sflush_r+0x66>
 80012f4:	6829      	ldr	r1, [r5, #0]
 80012f6:	291d      	cmp	r1, #29
 80012f8:	d82c      	bhi.n	8001354 <__sflush_r+0xb8>
 80012fa:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <__sflush_r+0x108>)
 80012fc:	40ca      	lsrs	r2, r1
 80012fe:	07d6      	lsls	r6, r2, #31
 8001300:	d528      	bpl.n	8001354 <__sflush_r+0xb8>
 8001302:	2200      	movs	r2, #0
 8001304:	6062      	str	r2, [r4, #4]
 8001306:	04d9      	lsls	r1, r3, #19
 8001308:	6922      	ldr	r2, [r4, #16]
 800130a:	6022      	str	r2, [r4, #0]
 800130c:	d504      	bpl.n	8001318 <__sflush_r+0x7c>
 800130e:	1c42      	adds	r2, r0, #1
 8001310:	d101      	bne.n	8001316 <__sflush_r+0x7a>
 8001312:	682b      	ldr	r3, [r5, #0]
 8001314:	b903      	cbnz	r3, 8001318 <__sflush_r+0x7c>
 8001316:	6560      	str	r0, [r4, #84]	; 0x54
 8001318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800131a:	602f      	str	r7, [r5, #0]
 800131c:	2900      	cmp	r1, #0
 800131e:	d0ca      	beq.n	80012b6 <__sflush_r+0x1a>
 8001320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001324:	4299      	cmp	r1, r3
 8001326:	d002      	beq.n	800132e <__sflush_r+0x92>
 8001328:	4628      	mov	r0, r5
 800132a:	f000 fa03 	bl	8001734 <_free_r>
 800132e:	2000      	movs	r0, #0
 8001330:	6360      	str	r0, [r4, #52]	; 0x34
 8001332:	e7c1      	b.n	80012b8 <__sflush_r+0x1c>
 8001334:	6a21      	ldr	r1, [r4, #32]
 8001336:	2301      	movs	r3, #1
 8001338:	4628      	mov	r0, r5
 800133a:	47b0      	blx	r6
 800133c:	1c41      	adds	r1, r0, #1
 800133e:	d1c7      	bne.n	80012d0 <__sflush_r+0x34>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0c4      	beq.n	80012d0 <__sflush_r+0x34>
 8001346:	2b1d      	cmp	r3, #29
 8001348:	d001      	beq.n	800134e <__sflush_r+0xb2>
 800134a:	2b16      	cmp	r3, #22
 800134c:	d101      	bne.n	8001352 <__sflush_r+0xb6>
 800134e:	602f      	str	r7, [r5, #0]
 8001350:	e7b1      	b.n	80012b6 <__sflush_r+0x1a>
 8001352:	89a3      	ldrh	r3, [r4, #12]
 8001354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001358:	81a3      	strh	r3, [r4, #12]
 800135a:	e7ad      	b.n	80012b8 <__sflush_r+0x1c>
 800135c:	690f      	ldr	r7, [r1, #16]
 800135e:	2f00      	cmp	r7, #0
 8001360:	d0a9      	beq.n	80012b6 <__sflush_r+0x1a>
 8001362:	0793      	lsls	r3, r2, #30
 8001364:	680e      	ldr	r6, [r1, #0]
 8001366:	bf08      	it	eq
 8001368:	694b      	ldreq	r3, [r1, #20]
 800136a:	600f      	str	r7, [r1, #0]
 800136c:	bf18      	it	ne
 800136e:	2300      	movne	r3, #0
 8001370:	eba6 0807 	sub.w	r8, r6, r7
 8001374:	608b      	str	r3, [r1, #8]
 8001376:	f1b8 0f00 	cmp.w	r8, #0
 800137a:	dd9c      	ble.n	80012b6 <__sflush_r+0x1a>
 800137c:	6a21      	ldr	r1, [r4, #32]
 800137e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001380:	4643      	mov	r3, r8
 8001382:	463a      	mov	r2, r7
 8001384:	4628      	mov	r0, r5
 8001386:	47b0      	blx	r6
 8001388:	2800      	cmp	r0, #0
 800138a:	dc06      	bgt.n	800139a <__sflush_r+0xfe>
 800138c:	89a3      	ldrh	r3, [r4, #12]
 800138e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001392:	81a3      	strh	r3, [r4, #12]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	e78e      	b.n	80012b8 <__sflush_r+0x1c>
 800139a:	4407      	add	r7, r0
 800139c:	eba8 0800 	sub.w	r8, r8, r0
 80013a0:	e7e9      	b.n	8001376 <__sflush_r+0xda>
 80013a2:	bf00      	nop
 80013a4:	20400001 	.word	0x20400001

080013a8 <_fflush_r>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	690b      	ldr	r3, [r1, #16]
 80013ac:	4605      	mov	r5, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	b913      	cbnz	r3, 80013b8 <_fflush_r+0x10>
 80013b2:	2500      	movs	r5, #0
 80013b4:	4628      	mov	r0, r5
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
 80013b8:	b118      	cbz	r0, 80013c2 <_fflush_r+0x1a>
 80013ba:	6983      	ldr	r3, [r0, #24]
 80013bc:	b90b      	cbnz	r3, 80013c2 <_fflush_r+0x1a>
 80013be:	f000 f887 	bl	80014d0 <__sinit>
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <_fflush_r+0x6c>)
 80013c4:	429c      	cmp	r4, r3
 80013c6:	d11b      	bne.n	8001400 <_fflush_r+0x58>
 80013c8:	686c      	ldr	r4, [r5, #4]
 80013ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0ef      	beq.n	80013b2 <_fflush_r+0xa>
 80013d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013d4:	07d0      	lsls	r0, r2, #31
 80013d6:	d404      	bmi.n	80013e2 <_fflush_r+0x3a>
 80013d8:	0599      	lsls	r1, r3, #22
 80013da:	d402      	bmi.n	80013e2 <_fflush_r+0x3a>
 80013dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013de:	f000 f93a 	bl	8001656 <__retarget_lock_acquire_recursive>
 80013e2:	4628      	mov	r0, r5
 80013e4:	4621      	mov	r1, r4
 80013e6:	f7ff ff59 	bl	800129c <__sflush_r>
 80013ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013ec:	07da      	lsls	r2, r3, #31
 80013ee:	4605      	mov	r5, r0
 80013f0:	d4e0      	bmi.n	80013b4 <_fflush_r+0xc>
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	059b      	lsls	r3, r3, #22
 80013f6:	d4dd      	bmi.n	80013b4 <_fflush_r+0xc>
 80013f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013fa:	f000 f92d 	bl	8001658 <__retarget_lock_release_recursive>
 80013fe:	e7d9      	b.n	80013b4 <_fflush_r+0xc>
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <_fflush_r+0x70>)
 8001402:	429c      	cmp	r4, r3
 8001404:	d101      	bne.n	800140a <_fflush_r+0x62>
 8001406:	68ac      	ldr	r4, [r5, #8]
 8001408:	e7df      	b.n	80013ca <_fflush_r+0x22>
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <_fflush_r+0x74>)
 800140c:	429c      	cmp	r4, r3
 800140e:	bf08      	it	eq
 8001410:	68ec      	ldreq	r4, [r5, #12]
 8001412:	e7da      	b.n	80013ca <_fflush_r+0x22>
 8001414:	08002470 	.word	0x08002470
 8001418:	08002490 	.word	0x08002490
 800141c:	08002450 	.word	0x08002450

08001420 <std>:
 8001420:	2300      	movs	r3, #0
 8001422:	b510      	push	{r4, lr}
 8001424:	4604      	mov	r4, r0
 8001426:	e9c0 3300 	strd	r3, r3, [r0]
 800142a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800142e:	6083      	str	r3, [r0, #8]
 8001430:	8181      	strh	r1, [r0, #12]
 8001432:	6643      	str	r3, [r0, #100]	; 0x64
 8001434:	81c2      	strh	r2, [r0, #14]
 8001436:	6183      	str	r3, [r0, #24]
 8001438:	4619      	mov	r1, r3
 800143a:	2208      	movs	r2, #8
 800143c:	305c      	adds	r0, #92	; 0x5c
 800143e:	f7ff fd85 	bl	8000f4c <memset>
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <std+0x38>)
 8001444:	6263      	str	r3, [r4, #36]	; 0x24
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <std+0x3c>)
 8001448:	62a3      	str	r3, [r4, #40]	; 0x28
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <std+0x40>)
 800144c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <std+0x44>)
 8001450:	6224      	str	r4, [r4, #32]
 8001452:	6323      	str	r3, [r4, #48]	; 0x30
 8001454:	bd10      	pop	{r4, pc}
 8001456:	bf00      	nop
 8001458:	08001f81 	.word	0x08001f81
 800145c:	08001fa3 	.word	0x08001fa3
 8001460:	08001fdb 	.word	0x08001fdb
 8001464:	08001fff 	.word	0x08001fff

08001468 <_cleanup_r>:
 8001468:	4901      	ldr	r1, [pc, #4]	; (8001470 <_cleanup_r+0x8>)
 800146a:	f000 b8c1 	b.w	80015f0 <_fwalk_reent>
 800146e:	bf00      	nop
 8001470:	080013a9 	.word	0x080013a9

08001474 <__sfmoreglue>:
 8001474:	b570      	push	{r4, r5, r6, lr}
 8001476:	2268      	movs	r2, #104	; 0x68
 8001478:	1e4d      	subs	r5, r1, #1
 800147a:	4355      	muls	r5, r2
 800147c:	460e      	mov	r6, r1
 800147e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001482:	f000 f9c3 	bl	800180c <_malloc_r>
 8001486:	4604      	mov	r4, r0
 8001488:	b140      	cbz	r0, 800149c <__sfmoreglue+0x28>
 800148a:	2100      	movs	r1, #0
 800148c:	e9c0 1600 	strd	r1, r6, [r0]
 8001490:	300c      	adds	r0, #12
 8001492:	60a0      	str	r0, [r4, #8]
 8001494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001498:	f7ff fd58 	bl	8000f4c <memset>
 800149c:	4620      	mov	r0, r4
 800149e:	bd70      	pop	{r4, r5, r6, pc}

080014a0 <__sfp_lock_acquire>:
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <__sfp_lock_acquire+0x8>)
 80014a2:	f000 b8d8 	b.w	8001656 <__retarget_lock_acquire_recursive>
 80014a6:	bf00      	nop
 80014a8:	200000b1 	.word	0x200000b1

080014ac <__sfp_lock_release>:
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <__sfp_lock_release+0x8>)
 80014ae:	f000 b8d3 	b.w	8001658 <__retarget_lock_release_recursive>
 80014b2:	bf00      	nop
 80014b4:	200000b1 	.word	0x200000b1

080014b8 <__sinit_lock_acquire>:
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <__sinit_lock_acquire+0x8>)
 80014ba:	f000 b8cc 	b.w	8001656 <__retarget_lock_acquire_recursive>
 80014be:	bf00      	nop
 80014c0:	200000b2 	.word	0x200000b2

080014c4 <__sinit_lock_release>:
 80014c4:	4801      	ldr	r0, [pc, #4]	; (80014cc <__sinit_lock_release+0x8>)
 80014c6:	f000 b8c7 	b.w	8001658 <__retarget_lock_release_recursive>
 80014ca:	bf00      	nop
 80014cc:	200000b2 	.word	0x200000b2

080014d0 <__sinit>:
 80014d0:	b510      	push	{r4, lr}
 80014d2:	4604      	mov	r4, r0
 80014d4:	f7ff fff0 	bl	80014b8 <__sinit_lock_acquire>
 80014d8:	69a3      	ldr	r3, [r4, #24]
 80014da:	b11b      	cbz	r3, 80014e4 <__sinit+0x14>
 80014dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014e0:	f7ff bff0 	b.w	80014c4 <__sinit_lock_release>
 80014e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80014e8:	6523      	str	r3, [r4, #80]	; 0x50
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <__sinit+0x68>)
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <__sinit+0x6c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80014f2:	42a3      	cmp	r3, r4
 80014f4:	bf04      	itt	eq
 80014f6:	2301      	moveq	r3, #1
 80014f8:	61a3      	streq	r3, [r4, #24]
 80014fa:	4620      	mov	r0, r4
 80014fc:	f000 f820 	bl	8001540 <__sfp>
 8001500:	6060      	str	r0, [r4, #4]
 8001502:	4620      	mov	r0, r4
 8001504:	f000 f81c 	bl	8001540 <__sfp>
 8001508:	60a0      	str	r0, [r4, #8]
 800150a:	4620      	mov	r0, r4
 800150c:	f000 f818 	bl	8001540 <__sfp>
 8001510:	2200      	movs	r2, #0
 8001512:	60e0      	str	r0, [r4, #12]
 8001514:	2104      	movs	r1, #4
 8001516:	6860      	ldr	r0, [r4, #4]
 8001518:	f7ff ff82 	bl	8001420 <std>
 800151c:	68a0      	ldr	r0, [r4, #8]
 800151e:	2201      	movs	r2, #1
 8001520:	2109      	movs	r1, #9
 8001522:	f7ff ff7d 	bl	8001420 <std>
 8001526:	68e0      	ldr	r0, [r4, #12]
 8001528:	2202      	movs	r2, #2
 800152a:	2112      	movs	r1, #18
 800152c:	f7ff ff78 	bl	8001420 <std>
 8001530:	2301      	movs	r3, #1
 8001532:	61a3      	str	r3, [r4, #24]
 8001534:	e7d2      	b.n	80014dc <__sinit+0xc>
 8001536:	bf00      	nop
 8001538:	0800239c 	.word	0x0800239c
 800153c:	08001469 	.word	0x08001469

08001540 <__sfp>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	4607      	mov	r7, r0
 8001544:	f7ff ffac 	bl	80014a0 <__sfp_lock_acquire>
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <__sfp+0x84>)
 800154a:	681e      	ldr	r6, [r3, #0]
 800154c:	69b3      	ldr	r3, [r6, #24]
 800154e:	b913      	cbnz	r3, 8001556 <__sfp+0x16>
 8001550:	4630      	mov	r0, r6
 8001552:	f7ff ffbd 	bl	80014d0 <__sinit>
 8001556:	3648      	adds	r6, #72	; 0x48
 8001558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800155c:	3b01      	subs	r3, #1
 800155e:	d503      	bpl.n	8001568 <__sfp+0x28>
 8001560:	6833      	ldr	r3, [r6, #0]
 8001562:	b30b      	cbz	r3, 80015a8 <__sfp+0x68>
 8001564:	6836      	ldr	r6, [r6, #0]
 8001566:	e7f7      	b.n	8001558 <__sfp+0x18>
 8001568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800156c:	b9d5      	cbnz	r5, 80015a4 <__sfp+0x64>
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <__sfp+0x88>)
 8001570:	60e3      	str	r3, [r4, #12]
 8001572:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001576:	6665      	str	r5, [r4, #100]	; 0x64
 8001578:	f000 f86c 	bl	8001654 <__retarget_lock_init_recursive>
 800157c:	f7ff ff96 	bl	80014ac <__sfp_lock_release>
 8001580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001588:	6025      	str	r5, [r4, #0]
 800158a:	61a5      	str	r5, [r4, #24]
 800158c:	2208      	movs	r2, #8
 800158e:	4629      	mov	r1, r5
 8001590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001594:	f7ff fcda 	bl	8000f4c <memset>
 8001598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800159c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015a0:	4620      	mov	r0, r4
 80015a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015a4:	3468      	adds	r4, #104	; 0x68
 80015a6:	e7d9      	b.n	800155c <__sfp+0x1c>
 80015a8:	2104      	movs	r1, #4
 80015aa:	4638      	mov	r0, r7
 80015ac:	f7ff ff62 	bl	8001474 <__sfmoreglue>
 80015b0:	4604      	mov	r4, r0
 80015b2:	6030      	str	r0, [r6, #0]
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d1d5      	bne.n	8001564 <__sfp+0x24>
 80015b8:	f7ff ff78 	bl	80014ac <__sfp_lock_release>
 80015bc:	230c      	movs	r3, #12
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	e7ee      	b.n	80015a0 <__sfp+0x60>
 80015c2:	bf00      	nop
 80015c4:	0800239c 	.word	0x0800239c
 80015c8:	ffff0001 	.word	0xffff0001

080015cc <fiprintf>:
 80015cc:	b40e      	push	{r1, r2, r3}
 80015ce:	b503      	push	{r0, r1, lr}
 80015d0:	4601      	mov	r1, r0
 80015d2:	ab03      	add	r3, sp, #12
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <fiprintf+0x20>)
 80015d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80015da:	6800      	ldr	r0, [r0, #0]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	f000 f9b3 	bl	8001948 <_vfiprintf_r>
 80015e2:	b002      	add	sp, #8
 80015e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80015e8:	b003      	add	sp, #12
 80015ea:	4770      	bx	lr
 80015ec:	2000002c 	.word	0x2000002c

080015f0 <_fwalk_reent>:
 80015f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015f4:	4606      	mov	r6, r0
 80015f6:	4688      	mov	r8, r1
 80015f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015fc:	2700      	movs	r7, #0
 80015fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001602:	f1b9 0901 	subs.w	r9, r9, #1
 8001606:	d505      	bpl.n	8001614 <_fwalk_reent+0x24>
 8001608:	6824      	ldr	r4, [r4, #0]
 800160a:	2c00      	cmp	r4, #0
 800160c:	d1f7      	bne.n	80015fe <_fwalk_reent+0xe>
 800160e:	4638      	mov	r0, r7
 8001610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001614:	89ab      	ldrh	r3, [r5, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d907      	bls.n	800162a <_fwalk_reent+0x3a>
 800161a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800161e:	3301      	adds	r3, #1
 8001620:	d003      	beq.n	800162a <_fwalk_reent+0x3a>
 8001622:	4629      	mov	r1, r5
 8001624:	4630      	mov	r0, r6
 8001626:	47c0      	blx	r8
 8001628:	4307      	orrs	r7, r0
 800162a:	3568      	adds	r5, #104	; 0x68
 800162c:	e7e9      	b.n	8001602 <_fwalk_reent+0x12>
	...

08001630 <_gettimeofday_r>:
 8001630:	b538      	push	{r3, r4, r5, lr}
 8001632:	4d07      	ldr	r5, [pc, #28]	; (8001650 <_gettimeofday_r+0x20>)
 8001634:	2300      	movs	r3, #0
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	602b      	str	r3, [r5, #0]
 800163e:	f000 fe51 	bl	80022e4 <_gettimeofday>
 8001642:	1c43      	adds	r3, r0, #1
 8001644:	d102      	bne.n	800164c <_gettimeofday_r+0x1c>
 8001646:	682b      	ldr	r3, [r5, #0]
 8001648:	b103      	cbz	r3, 800164c <_gettimeofday_r+0x1c>
 800164a:	6023      	str	r3, [r4, #0]
 800164c:	bd38      	pop	{r3, r4, r5, pc}
 800164e:	bf00      	nop
 8001650:	200000bc 	.word	0x200000bc

08001654 <__retarget_lock_init_recursive>:
 8001654:	4770      	bx	lr

08001656 <__retarget_lock_acquire_recursive>:
 8001656:	4770      	bx	lr

08001658 <__retarget_lock_release_recursive>:
 8001658:	4770      	bx	lr

0800165a <__swhatbuf_r>:
 800165a:	b570      	push	{r4, r5, r6, lr}
 800165c:	460e      	mov	r6, r1
 800165e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001662:	2900      	cmp	r1, #0
 8001664:	b096      	sub	sp, #88	; 0x58
 8001666:	4614      	mov	r4, r2
 8001668:	461d      	mov	r5, r3
 800166a:	da08      	bge.n	800167e <__swhatbuf_r+0x24>
 800166c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	602a      	str	r2, [r5, #0]
 8001674:	061a      	lsls	r2, r3, #24
 8001676:	d410      	bmi.n	800169a <__swhatbuf_r+0x40>
 8001678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167c:	e00e      	b.n	800169c <__swhatbuf_r+0x42>
 800167e:	466a      	mov	r2, sp
 8001680:	f000 fd9a 	bl	80021b8 <_fstat_r>
 8001684:	2800      	cmp	r0, #0
 8001686:	dbf1      	blt.n	800166c <__swhatbuf_r+0x12>
 8001688:	9a01      	ldr	r2, [sp, #4]
 800168a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800168e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001692:	425a      	negs	r2, r3
 8001694:	415a      	adcs	r2, r3
 8001696:	602a      	str	r2, [r5, #0]
 8001698:	e7ee      	b.n	8001678 <__swhatbuf_r+0x1e>
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	2000      	movs	r0, #0
 800169e:	6023      	str	r3, [r4, #0]
 80016a0:	b016      	add	sp, #88	; 0x58
 80016a2:	bd70      	pop	{r4, r5, r6, pc}

080016a4 <__smakebuf_r>:
 80016a4:	898b      	ldrh	r3, [r1, #12]
 80016a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016a8:	079d      	lsls	r5, r3, #30
 80016aa:	4606      	mov	r6, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	d507      	bpl.n	80016c0 <__smakebuf_r+0x1c>
 80016b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	6123      	str	r3, [r4, #16]
 80016b8:	2301      	movs	r3, #1
 80016ba:	6163      	str	r3, [r4, #20]
 80016bc:	b002      	add	sp, #8
 80016be:	bd70      	pop	{r4, r5, r6, pc}
 80016c0:	ab01      	add	r3, sp, #4
 80016c2:	466a      	mov	r2, sp
 80016c4:	f7ff ffc9 	bl	800165a <__swhatbuf_r>
 80016c8:	9900      	ldr	r1, [sp, #0]
 80016ca:	4605      	mov	r5, r0
 80016cc:	4630      	mov	r0, r6
 80016ce:	f000 f89d 	bl	800180c <_malloc_r>
 80016d2:	b948      	cbnz	r0, 80016e8 <__smakebuf_r+0x44>
 80016d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d8:	059a      	lsls	r2, r3, #22
 80016da:	d4ef      	bmi.n	80016bc <__smakebuf_r+0x18>
 80016dc:	f023 0303 	bic.w	r3, r3, #3
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	81a3      	strh	r3, [r4, #12]
 80016e6:	e7e3      	b.n	80016b0 <__smakebuf_r+0xc>
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <__smakebuf_r+0x7c>)
 80016ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	6020      	str	r0, [r4, #0]
 80016f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	9b00      	ldr	r3, [sp, #0]
 80016f8:	6163      	str	r3, [r4, #20]
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	6120      	str	r0, [r4, #16]
 80016fe:	b15b      	cbz	r3, 8001718 <__smakebuf_r+0x74>
 8001700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001704:	4630      	mov	r0, r6
 8001706:	f000 fd69 	bl	80021dc <_isatty_r>
 800170a:	b128      	cbz	r0, 8001718 <__smakebuf_r+0x74>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	81a3      	strh	r3, [r4, #12]
 8001718:	89a0      	ldrh	r0, [r4, #12]
 800171a:	4305      	orrs	r5, r0
 800171c:	81a5      	strh	r5, [r4, #12]
 800171e:	e7cd      	b.n	80016bc <__smakebuf_r+0x18>
 8001720:	08001469 	.word	0x08001469

08001724 <malloc>:
 8001724:	4b02      	ldr	r3, [pc, #8]	; (8001730 <malloc+0xc>)
 8001726:	4601      	mov	r1, r0
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	f000 b86f 	b.w	800180c <_malloc_r>
 800172e:	bf00      	nop
 8001730:	2000002c 	.word	0x2000002c

08001734 <_free_r>:
 8001734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001736:	2900      	cmp	r1, #0
 8001738:	d044      	beq.n	80017c4 <_free_r+0x90>
 800173a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800173e:	9001      	str	r0, [sp, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f1a1 0404 	sub.w	r4, r1, #4
 8001746:	bfb8      	it	lt
 8001748:	18e4      	addlt	r4, r4, r3
 800174a:	f000 fd69 	bl	8002220 <__malloc_lock>
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <_free_r+0x94>)
 8001750:	9801      	ldr	r0, [sp, #4]
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	b933      	cbnz	r3, 8001764 <_free_r+0x30>
 8001756:	6063      	str	r3, [r4, #4]
 8001758:	6014      	str	r4, [r2, #0]
 800175a:	b003      	add	sp, #12
 800175c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001760:	f000 bd64 	b.w	800222c <__malloc_unlock>
 8001764:	42a3      	cmp	r3, r4
 8001766:	d908      	bls.n	800177a <_free_r+0x46>
 8001768:	6825      	ldr	r5, [r4, #0]
 800176a:	1961      	adds	r1, r4, r5
 800176c:	428b      	cmp	r3, r1
 800176e:	bf01      	itttt	eq
 8001770:	6819      	ldreq	r1, [r3, #0]
 8001772:	685b      	ldreq	r3, [r3, #4]
 8001774:	1949      	addeq	r1, r1, r5
 8001776:	6021      	streq	r1, [r4, #0]
 8001778:	e7ed      	b.n	8001756 <_free_r+0x22>
 800177a:	461a      	mov	r2, r3
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	b10b      	cbz	r3, 8001784 <_free_r+0x50>
 8001780:	42a3      	cmp	r3, r4
 8001782:	d9fa      	bls.n	800177a <_free_r+0x46>
 8001784:	6811      	ldr	r1, [r2, #0]
 8001786:	1855      	adds	r5, r2, r1
 8001788:	42a5      	cmp	r5, r4
 800178a:	d10b      	bne.n	80017a4 <_free_r+0x70>
 800178c:	6824      	ldr	r4, [r4, #0]
 800178e:	4421      	add	r1, r4
 8001790:	1854      	adds	r4, r2, r1
 8001792:	42a3      	cmp	r3, r4
 8001794:	6011      	str	r1, [r2, #0]
 8001796:	d1e0      	bne.n	800175a <_free_r+0x26>
 8001798:	681c      	ldr	r4, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	6053      	str	r3, [r2, #4]
 800179e:	4421      	add	r1, r4
 80017a0:	6011      	str	r1, [r2, #0]
 80017a2:	e7da      	b.n	800175a <_free_r+0x26>
 80017a4:	d902      	bls.n	80017ac <_free_r+0x78>
 80017a6:	230c      	movs	r3, #12
 80017a8:	6003      	str	r3, [r0, #0]
 80017aa:	e7d6      	b.n	800175a <_free_r+0x26>
 80017ac:	6825      	ldr	r5, [r4, #0]
 80017ae:	1961      	adds	r1, r4, r5
 80017b0:	428b      	cmp	r3, r1
 80017b2:	bf04      	itt	eq
 80017b4:	6819      	ldreq	r1, [r3, #0]
 80017b6:	685b      	ldreq	r3, [r3, #4]
 80017b8:	6063      	str	r3, [r4, #4]
 80017ba:	bf04      	itt	eq
 80017bc:	1949      	addeq	r1, r1, r5
 80017be:	6021      	streq	r1, [r4, #0]
 80017c0:	6054      	str	r4, [r2, #4]
 80017c2:	e7ca      	b.n	800175a <_free_r+0x26>
 80017c4:	b003      	add	sp, #12
 80017c6:	bd30      	pop	{r4, r5, pc}
 80017c8:	200000b4 	.word	0x200000b4

080017cc <sbrk_aligned>:
 80017cc:	b570      	push	{r4, r5, r6, lr}
 80017ce:	4e0e      	ldr	r6, [pc, #56]	; (8001808 <sbrk_aligned+0x3c>)
 80017d0:	460c      	mov	r4, r1
 80017d2:	6831      	ldr	r1, [r6, #0]
 80017d4:	4605      	mov	r5, r0
 80017d6:	b911      	cbnz	r1, 80017de <sbrk_aligned+0x12>
 80017d8:	f000 fbc2 	bl	8001f60 <_sbrk_r>
 80017dc:	6030      	str	r0, [r6, #0]
 80017de:	4621      	mov	r1, r4
 80017e0:	4628      	mov	r0, r5
 80017e2:	f000 fbbd 	bl	8001f60 <_sbrk_r>
 80017e6:	1c43      	adds	r3, r0, #1
 80017e8:	d00a      	beq.n	8001800 <sbrk_aligned+0x34>
 80017ea:	1cc4      	adds	r4, r0, #3
 80017ec:	f024 0403 	bic.w	r4, r4, #3
 80017f0:	42a0      	cmp	r0, r4
 80017f2:	d007      	beq.n	8001804 <sbrk_aligned+0x38>
 80017f4:	1a21      	subs	r1, r4, r0
 80017f6:	4628      	mov	r0, r5
 80017f8:	f000 fbb2 	bl	8001f60 <_sbrk_r>
 80017fc:	3001      	adds	r0, #1
 80017fe:	d101      	bne.n	8001804 <sbrk_aligned+0x38>
 8001800:	f04f 34ff 	mov.w	r4, #4294967295
 8001804:	4620      	mov	r0, r4
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	200000b8 	.word	0x200000b8

0800180c <_malloc_r>:
 800180c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001810:	1ccd      	adds	r5, r1, #3
 8001812:	f025 0503 	bic.w	r5, r5, #3
 8001816:	3508      	adds	r5, #8
 8001818:	2d0c      	cmp	r5, #12
 800181a:	bf38      	it	cc
 800181c:	250c      	movcc	r5, #12
 800181e:	2d00      	cmp	r5, #0
 8001820:	4607      	mov	r7, r0
 8001822:	db01      	blt.n	8001828 <_malloc_r+0x1c>
 8001824:	42a9      	cmp	r1, r5
 8001826:	d905      	bls.n	8001834 <_malloc_r+0x28>
 8001828:	230c      	movs	r3, #12
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	2600      	movs	r6, #0
 800182e:	4630      	mov	r0, r6
 8001830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001834:	4e2e      	ldr	r6, [pc, #184]	; (80018f0 <_malloc_r+0xe4>)
 8001836:	f000 fcf3 	bl	8002220 <__malloc_lock>
 800183a:	6833      	ldr	r3, [r6, #0]
 800183c:	461c      	mov	r4, r3
 800183e:	bb34      	cbnz	r4, 800188e <_malloc_r+0x82>
 8001840:	4629      	mov	r1, r5
 8001842:	4638      	mov	r0, r7
 8001844:	f7ff ffc2 	bl	80017cc <sbrk_aligned>
 8001848:	1c43      	adds	r3, r0, #1
 800184a:	4604      	mov	r4, r0
 800184c:	d14d      	bne.n	80018ea <_malloc_r+0xde>
 800184e:	6834      	ldr	r4, [r6, #0]
 8001850:	4626      	mov	r6, r4
 8001852:	2e00      	cmp	r6, #0
 8001854:	d140      	bne.n	80018d8 <_malloc_r+0xcc>
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	4631      	mov	r1, r6
 800185a:	4638      	mov	r0, r7
 800185c:	eb04 0803 	add.w	r8, r4, r3
 8001860:	f000 fb7e 	bl	8001f60 <_sbrk_r>
 8001864:	4580      	cmp	r8, r0
 8001866:	d13a      	bne.n	80018de <_malloc_r+0xd2>
 8001868:	6821      	ldr	r1, [r4, #0]
 800186a:	3503      	adds	r5, #3
 800186c:	1a6d      	subs	r5, r5, r1
 800186e:	f025 0503 	bic.w	r5, r5, #3
 8001872:	3508      	adds	r5, #8
 8001874:	2d0c      	cmp	r5, #12
 8001876:	bf38      	it	cc
 8001878:	250c      	movcc	r5, #12
 800187a:	4629      	mov	r1, r5
 800187c:	4638      	mov	r0, r7
 800187e:	f7ff ffa5 	bl	80017cc <sbrk_aligned>
 8001882:	3001      	adds	r0, #1
 8001884:	d02b      	beq.n	80018de <_malloc_r+0xd2>
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	442b      	add	r3, r5
 800188a:	6023      	str	r3, [r4, #0]
 800188c:	e00e      	b.n	80018ac <_malloc_r+0xa0>
 800188e:	6822      	ldr	r2, [r4, #0]
 8001890:	1b52      	subs	r2, r2, r5
 8001892:	d41e      	bmi.n	80018d2 <_malloc_r+0xc6>
 8001894:	2a0b      	cmp	r2, #11
 8001896:	d916      	bls.n	80018c6 <_malloc_r+0xba>
 8001898:	1961      	adds	r1, r4, r5
 800189a:	42a3      	cmp	r3, r4
 800189c:	6025      	str	r5, [r4, #0]
 800189e:	bf18      	it	ne
 80018a0:	6059      	strne	r1, [r3, #4]
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	bf08      	it	eq
 80018a6:	6031      	streq	r1, [r6, #0]
 80018a8:	5162      	str	r2, [r4, r5]
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	4638      	mov	r0, r7
 80018ae:	f104 060b 	add.w	r6, r4, #11
 80018b2:	f000 fcbb 	bl	800222c <__malloc_unlock>
 80018b6:	f026 0607 	bic.w	r6, r6, #7
 80018ba:	1d23      	adds	r3, r4, #4
 80018bc:	1af2      	subs	r2, r6, r3
 80018be:	d0b6      	beq.n	800182e <_malloc_r+0x22>
 80018c0:	1b9b      	subs	r3, r3, r6
 80018c2:	50a3      	str	r3, [r4, r2]
 80018c4:	e7b3      	b.n	800182e <_malloc_r+0x22>
 80018c6:	6862      	ldr	r2, [r4, #4]
 80018c8:	42a3      	cmp	r3, r4
 80018ca:	bf0c      	ite	eq
 80018cc:	6032      	streq	r2, [r6, #0]
 80018ce:	605a      	strne	r2, [r3, #4]
 80018d0:	e7ec      	b.n	80018ac <_malloc_r+0xa0>
 80018d2:	4623      	mov	r3, r4
 80018d4:	6864      	ldr	r4, [r4, #4]
 80018d6:	e7b2      	b.n	800183e <_malloc_r+0x32>
 80018d8:	4634      	mov	r4, r6
 80018da:	6876      	ldr	r6, [r6, #4]
 80018dc:	e7b9      	b.n	8001852 <_malloc_r+0x46>
 80018de:	230c      	movs	r3, #12
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4638      	mov	r0, r7
 80018e4:	f000 fca2 	bl	800222c <__malloc_unlock>
 80018e8:	e7a1      	b.n	800182e <_malloc_r+0x22>
 80018ea:	6025      	str	r5, [r4, #0]
 80018ec:	e7de      	b.n	80018ac <_malloc_r+0xa0>
 80018ee:	bf00      	nop
 80018f0:	200000b4 	.word	0x200000b4

080018f4 <__sfputc_r>:
 80018f4:	6893      	ldr	r3, [r2, #8]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	b410      	push	{r4}
 80018fc:	6093      	str	r3, [r2, #8]
 80018fe:	da08      	bge.n	8001912 <__sfputc_r+0x1e>
 8001900:	6994      	ldr	r4, [r2, #24]
 8001902:	42a3      	cmp	r3, r4
 8001904:	db01      	blt.n	800190a <__sfputc_r+0x16>
 8001906:	290a      	cmp	r1, #10
 8001908:	d103      	bne.n	8001912 <__sfputc_r+0x1e>
 800190a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800190e:	f000 bb7b 	b.w	8002008 <__swbuf_r>
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	1c58      	adds	r0, r3, #1
 8001916:	6010      	str	r0, [r2, #0]
 8001918:	7019      	strb	r1, [r3, #0]
 800191a:	4608      	mov	r0, r1
 800191c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001920:	4770      	bx	lr

08001922 <__sfputs_r>:
 8001922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001924:	4606      	mov	r6, r0
 8001926:	460f      	mov	r7, r1
 8001928:	4614      	mov	r4, r2
 800192a:	18d5      	adds	r5, r2, r3
 800192c:	42ac      	cmp	r4, r5
 800192e:	d101      	bne.n	8001934 <__sfputs_r+0x12>
 8001930:	2000      	movs	r0, #0
 8001932:	e007      	b.n	8001944 <__sfputs_r+0x22>
 8001934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001938:	463a      	mov	r2, r7
 800193a:	4630      	mov	r0, r6
 800193c:	f7ff ffda 	bl	80018f4 <__sfputc_r>
 8001940:	1c43      	adds	r3, r0, #1
 8001942:	d1f3      	bne.n	800192c <__sfputs_r+0xa>
 8001944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001948 <_vfiprintf_r>:
 8001948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800194c:	460d      	mov	r5, r1
 800194e:	b09d      	sub	sp, #116	; 0x74
 8001950:	4614      	mov	r4, r2
 8001952:	4698      	mov	r8, r3
 8001954:	4606      	mov	r6, r0
 8001956:	b118      	cbz	r0, 8001960 <_vfiprintf_r+0x18>
 8001958:	6983      	ldr	r3, [r0, #24]
 800195a:	b90b      	cbnz	r3, 8001960 <_vfiprintf_r+0x18>
 800195c:	f7ff fdb8 	bl	80014d0 <__sinit>
 8001960:	4b89      	ldr	r3, [pc, #548]	; (8001b88 <_vfiprintf_r+0x240>)
 8001962:	429d      	cmp	r5, r3
 8001964:	d11b      	bne.n	800199e <_vfiprintf_r+0x56>
 8001966:	6875      	ldr	r5, [r6, #4]
 8001968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800196a:	07d9      	lsls	r1, r3, #31
 800196c:	d405      	bmi.n	800197a <_vfiprintf_r+0x32>
 800196e:	89ab      	ldrh	r3, [r5, #12]
 8001970:	059a      	lsls	r2, r3, #22
 8001972:	d402      	bmi.n	800197a <_vfiprintf_r+0x32>
 8001974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001976:	f7ff fe6e 	bl	8001656 <__retarget_lock_acquire_recursive>
 800197a:	89ab      	ldrh	r3, [r5, #12]
 800197c:	071b      	lsls	r3, r3, #28
 800197e:	d501      	bpl.n	8001984 <_vfiprintf_r+0x3c>
 8001980:	692b      	ldr	r3, [r5, #16]
 8001982:	b9eb      	cbnz	r3, 80019c0 <_vfiprintf_r+0x78>
 8001984:	4629      	mov	r1, r5
 8001986:	4630      	mov	r0, r6
 8001988:	f000 fb90 	bl	80020ac <__swsetup_r>
 800198c:	b1c0      	cbz	r0, 80019c0 <_vfiprintf_r+0x78>
 800198e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001990:	07dc      	lsls	r4, r3, #31
 8001992:	d50e      	bpl.n	80019b2 <_vfiprintf_r+0x6a>
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	b01d      	add	sp, #116	; 0x74
 800199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800199e:	4b7b      	ldr	r3, [pc, #492]	; (8001b8c <_vfiprintf_r+0x244>)
 80019a0:	429d      	cmp	r5, r3
 80019a2:	d101      	bne.n	80019a8 <_vfiprintf_r+0x60>
 80019a4:	68b5      	ldr	r5, [r6, #8]
 80019a6:	e7df      	b.n	8001968 <_vfiprintf_r+0x20>
 80019a8:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <_vfiprintf_r+0x248>)
 80019aa:	429d      	cmp	r5, r3
 80019ac:	bf08      	it	eq
 80019ae:	68f5      	ldreq	r5, [r6, #12]
 80019b0:	e7da      	b.n	8001968 <_vfiprintf_r+0x20>
 80019b2:	89ab      	ldrh	r3, [r5, #12]
 80019b4:	0598      	lsls	r0, r3, #22
 80019b6:	d4ed      	bmi.n	8001994 <_vfiprintf_r+0x4c>
 80019b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019ba:	f7ff fe4d 	bl	8001658 <__retarget_lock_release_recursive>
 80019be:	e7e9      	b.n	8001994 <_vfiprintf_r+0x4c>
 80019c0:	2300      	movs	r3, #0
 80019c2:	9309      	str	r3, [sp, #36]	; 0x24
 80019c4:	2320      	movs	r3, #32
 80019c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80019ce:	2330      	movs	r3, #48	; 0x30
 80019d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001b94 <_vfiprintf_r+0x24c>
 80019d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019d8:	f04f 0901 	mov.w	r9, #1
 80019dc:	4623      	mov	r3, r4
 80019de:	469a      	mov	sl, r3
 80019e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019e4:	b10a      	cbz	r2, 80019ea <_vfiprintf_r+0xa2>
 80019e6:	2a25      	cmp	r2, #37	; 0x25
 80019e8:	d1f9      	bne.n	80019de <_vfiprintf_r+0x96>
 80019ea:	ebba 0b04 	subs.w	fp, sl, r4
 80019ee:	d00b      	beq.n	8001a08 <_vfiprintf_r+0xc0>
 80019f0:	465b      	mov	r3, fp
 80019f2:	4622      	mov	r2, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	4630      	mov	r0, r6
 80019f8:	f7ff ff93 	bl	8001922 <__sfputs_r>
 80019fc:	3001      	adds	r0, #1
 80019fe:	f000 80aa 	beq.w	8001b56 <_vfiprintf_r+0x20e>
 8001a02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a04:	445a      	add	r2, fp
 8001a06:	9209      	str	r2, [sp, #36]	; 0x24
 8001a08:	f89a 3000 	ldrb.w	r3, [sl]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a2 	beq.w	8001b56 <_vfiprintf_r+0x20e>
 8001a12:	2300      	movs	r3, #0
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a1c:	f10a 0a01 	add.w	sl, sl, #1
 8001a20:	9304      	str	r3, [sp, #16]
 8001a22:	9307      	str	r3, [sp, #28]
 8001a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a28:	931a      	str	r3, [sp, #104]	; 0x68
 8001a2a:	4654      	mov	r4, sl
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a32:	4858      	ldr	r0, [pc, #352]	; (8001b94 <_vfiprintf_r+0x24c>)
 8001a34:	f7fe fbcc 	bl	80001d0 <memchr>
 8001a38:	9a04      	ldr	r2, [sp, #16]
 8001a3a:	b9d8      	cbnz	r0, 8001a74 <_vfiprintf_r+0x12c>
 8001a3c:	06d1      	lsls	r1, r2, #27
 8001a3e:	bf44      	itt	mi
 8001a40:	2320      	movmi	r3, #32
 8001a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a46:	0713      	lsls	r3, r2, #28
 8001a48:	bf44      	itt	mi
 8001a4a:	232b      	movmi	r3, #43	; 0x2b
 8001a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a50:	f89a 3000 	ldrb.w	r3, [sl]
 8001a54:	2b2a      	cmp	r3, #42	; 0x2a
 8001a56:	d015      	beq.n	8001a84 <_vfiprintf_r+0x13c>
 8001a58:	9a07      	ldr	r2, [sp, #28]
 8001a5a:	4654      	mov	r4, sl
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f04f 0c0a 	mov.w	ip, #10
 8001a62:	4621      	mov	r1, r4
 8001a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a68:	3b30      	subs	r3, #48	; 0x30
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	d94e      	bls.n	8001b0c <_vfiprintf_r+0x1c4>
 8001a6e:	b1b0      	cbz	r0, 8001a9e <_vfiprintf_r+0x156>
 8001a70:	9207      	str	r2, [sp, #28]
 8001a72:	e014      	b.n	8001a9e <_vfiprintf_r+0x156>
 8001a74:	eba0 0308 	sub.w	r3, r0, r8
 8001a78:	fa09 f303 	lsl.w	r3, r9, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	9304      	str	r3, [sp, #16]
 8001a80:	46a2      	mov	sl, r4
 8001a82:	e7d2      	b.n	8001a2a <_vfiprintf_r+0xe2>
 8001a84:	9b03      	ldr	r3, [sp, #12]
 8001a86:	1d19      	adds	r1, r3, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	9103      	str	r1, [sp, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bfbb      	ittet	lt
 8001a90:	425b      	neglt	r3, r3
 8001a92:	f042 0202 	orrlt.w	r2, r2, #2
 8001a96:	9307      	strge	r3, [sp, #28]
 8001a98:	9307      	strlt	r3, [sp, #28]
 8001a9a:	bfb8      	it	lt
 8001a9c:	9204      	strlt	r2, [sp, #16]
 8001a9e:	7823      	ldrb	r3, [r4, #0]
 8001aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8001aa2:	d10c      	bne.n	8001abe <_vfiprintf_r+0x176>
 8001aa4:	7863      	ldrb	r3, [r4, #1]
 8001aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8001aa8:	d135      	bne.n	8001b16 <_vfiprintf_r+0x1ce>
 8001aaa:	9b03      	ldr	r3, [sp, #12]
 8001aac:	1d1a      	adds	r2, r3, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	9203      	str	r2, [sp, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bfb8      	it	lt
 8001ab6:	f04f 33ff 	movlt.w	r3, #4294967295
 8001aba:	3402      	adds	r4, #2
 8001abc:	9305      	str	r3, [sp, #20]
 8001abe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001ba4 <_vfiprintf_r+0x25c>
 8001ac2:	7821      	ldrb	r1, [r4, #0]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4650      	mov	r0, sl
 8001ac8:	f7fe fb82 	bl	80001d0 <memchr>
 8001acc:	b140      	cbz	r0, 8001ae0 <_vfiprintf_r+0x198>
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	eba0 000a 	sub.w	r0, r0, sl
 8001ad4:	fa03 f000 	lsl.w	r0, r3, r0
 8001ad8:	9b04      	ldr	r3, [sp, #16]
 8001ada:	4303      	orrs	r3, r0
 8001adc:	3401      	adds	r4, #1
 8001ade:	9304      	str	r3, [sp, #16]
 8001ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ae4:	482c      	ldr	r0, [pc, #176]	; (8001b98 <_vfiprintf_r+0x250>)
 8001ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aea:	2206      	movs	r2, #6
 8001aec:	f7fe fb70 	bl	80001d0 <memchr>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d03f      	beq.n	8001b74 <_vfiprintf_r+0x22c>
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <_vfiprintf_r+0x254>)
 8001af6:	bb1b      	cbnz	r3, 8001b40 <_vfiprintf_r+0x1f8>
 8001af8:	9b03      	ldr	r3, [sp, #12]
 8001afa:	3307      	adds	r3, #7
 8001afc:	f023 0307 	bic.w	r3, r3, #7
 8001b00:	3308      	adds	r3, #8
 8001b02:	9303      	str	r3, [sp, #12]
 8001b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b06:	443b      	add	r3, r7
 8001b08:	9309      	str	r3, [sp, #36]	; 0x24
 8001b0a:	e767      	b.n	80019dc <_vfiprintf_r+0x94>
 8001b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b10:	460c      	mov	r4, r1
 8001b12:	2001      	movs	r0, #1
 8001b14:	e7a5      	b.n	8001a62 <_vfiprintf_r+0x11a>
 8001b16:	2300      	movs	r3, #0
 8001b18:	3401      	adds	r4, #1
 8001b1a:	9305      	str	r3, [sp, #20]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 0c0a 	mov.w	ip, #10
 8001b22:	4620      	mov	r0, r4
 8001b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b28:	3a30      	subs	r2, #48	; 0x30
 8001b2a:	2a09      	cmp	r2, #9
 8001b2c:	d903      	bls.n	8001b36 <_vfiprintf_r+0x1ee>
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0c5      	beq.n	8001abe <_vfiprintf_r+0x176>
 8001b32:	9105      	str	r1, [sp, #20]
 8001b34:	e7c3      	b.n	8001abe <_vfiprintf_r+0x176>
 8001b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e7f0      	b.n	8001b22 <_vfiprintf_r+0x1da>
 8001b40:	ab03      	add	r3, sp, #12
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	462a      	mov	r2, r5
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <_vfiprintf_r+0x258>)
 8001b48:	a904      	add	r1, sp, #16
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	f3af 8000 	nop.w
 8001b50:	4607      	mov	r7, r0
 8001b52:	1c78      	adds	r0, r7, #1
 8001b54:	d1d6      	bne.n	8001b04 <_vfiprintf_r+0x1bc>
 8001b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b58:	07d9      	lsls	r1, r3, #31
 8001b5a:	d405      	bmi.n	8001b68 <_vfiprintf_r+0x220>
 8001b5c:	89ab      	ldrh	r3, [r5, #12]
 8001b5e:	059a      	lsls	r2, r3, #22
 8001b60:	d402      	bmi.n	8001b68 <_vfiprintf_r+0x220>
 8001b62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b64:	f7ff fd78 	bl	8001658 <__retarget_lock_release_recursive>
 8001b68:	89ab      	ldrh	r3, [r5, #12]
 8001b6a:	065b      	lsls	r3, r3, #25
 8001b6c:	f53f af12 	bmi.w	8001994 <_vfiprintf_r+0x4c>
 8001b70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b72:	e711      	b.n	8001998 <_vfiprintf_r+0x50>
 8001b74:	ab03      	add	r3, sp, #12
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	462a      	mov	r2, r5
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <_vfiprintf_r+0x258>)
 8001b7c:	a904      	add	r1, sp, #16
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f000 f880 	bl	8001c84 <_printf_i>
 8001b84:	e7e4      	b.n	8001b50 <_vfiprintf_r+0x208>
 8001b86:	bf00      	nop
 8001b88:	08002470 	.word	0x08002470
 8001b8c:	08002490 	.word	0x08002490
 8001b90:	08002450 	.word	0x08002450
 8001b94:	080024b0 	.word	0x080024b0
 8001b98:	080024ba 	.word	0x080024ba
 8001b9c:	00000000 	.word	0x00000000
 8001ba0:	08001923 	.word	0x08001923
 8001ba4:	080024b6 	.word	0x080024b6

08001ba8 <_printf_common>:
 8001ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bac:	4616      	mov	r6, r2
 8001bae:	4699      	mov	r9, r3
 8001bb0:	688a      	ldr	r2, [r1, #8]
 8001bb2:	690b      	ldr	r3, [r1, #16]
 8001bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	bfb8      	it	lt
 8001bbc:	4613      	movlt	r3, r2
 8001bbe:	6033      	str	r3, [r6, #0]
 8001bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bc4:	4607      	mov	r7, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	b10a      	cbz	r2, 8001bce <_printf_common+0x26>
 8001bca:	3301      	adds	r3, #1
 8001bcc:	6033      	str	r3, [r6, #0]
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	0699      	lsls	r1, r3, #26
 8001bd2:	bf42      	ittt	mi
 8001bd4:	6833      	ldrmi	r3, [r6, #0]
 8001bd6:	3302      	addmi	r3, #2
 8001bd8:	6033      	strmi	r3, [r6, #0]
 8001bda:	6825      	ldr	r5, [r4, #0]
 8001bdc:	f015 0506 	ands.w	r5, r5, #6
 8001be0:	d106      	bne.n	8001bf0 <_printf_common+0x48>
 8001be2:	f104 0a19 	add.w	sl, r4, #25
 8001be6:	68e3      	ldr	r3, [r4, #12]
 8001be8:	6832      	ldr	r2, [r6, #0]
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	42ab      	cmp	r3, r5
 8001bee:	dc26      	bgt.n	8001c3e <_printf_common+0x96>
 8001bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001bf4:	1e13      	subs	r3, r2, #0
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	bf18      	it	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	0692      	lsls	r2, r2, #26
 8001bfe:	d42b      	bmi.n	8001c58 <_printf_common+0xb0>
 8001c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c04:	4649      	mov	r1, r9
 8001c06:	4638      	mov	r0, r7
 8001c08:	47c0      	blx	r8
 8001c0a:	3001      	adds	r0, #1
 8001c0c:	d01e      	beq.n	8001c4c <_printf_common+0xa4>
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	68e5      	ldr	r5, [r4, #12]
 8001c12:	6832      	ldr	r2, [r6, #0]
 8001c14:	f003 0306 	and.w	r3, r3, #6
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	bf08      	it	eq
 8001c1c:	1aad      	subeq	r5, r5, r2
 8001c1e:	68a3      	ldr	r3, [r4, #8]
 8001c20:	6922      	ldr	r2, [r4, #16]
 8001c22:	bf0c      	ite	eq
 8001c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c28:	2500      	movne	r5, #0
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	bfc4      	itt	gt
 8001c2e:	1a9b      	subgt	r3, r3, r2
 8001c30:	18ed      	addgt	r5, r5, r3
 8001c32:	2600      	movs	r6, #0
 8001c34:	341a      	adds	r4, #26
 8001c36:	42b5      	cmp	r5, r6
 8001c38:	d11a      	bne.n	8001c70 <_printf_common+0xc8>
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	e008      	b.n	8001c50 <_printf_common+0xa8>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	4652      	mov	r2, sl
 8001c42:	4649      	mov	r1, r9
 8001c44:	4638      	mov	r0, r7
 8001c46:	47c0      	blx	r8
 8001c48:	3001      	adds	r0, #1
 8001c4a:	d103      	bne.n	8001c54 <_printf_common+0xac>
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c54:	3501      	adds	r5, #1
 8001c56:	e7c6      	b.n	8001be6 <_printf_common+0x3e>
 8001c58:	18e1      	adds	r1, r4, r3
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	2030      	movs	r0, #48	; 0x30
 8001c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c62:	4422      	add	r2, r4
 8001c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	e7c7      	b.n	8001c00 <_printf_common+0x58>
 8001c70:	2301      	movs	r3, #1
 8001c72:	4622      	mov	r2, r4
 8001c74:	4649      	mov	r1, r9
 8001c76:	4638      	mov	r0, r7
 8001c78:	47c0      	blx	r8
 8001c7a:	3001      	adds	r0, #1
 8001c7c:	d0e6      	beq.n	8001c4c <_printf_common+0xa4>
 8001c7e:	3601      	adds	r6, #1
 8001c80:	e7d9      	b.n	8001c36 <_printf_common+0x8e>
	...

08001c84 <_printf_i>:
 8001c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c88:	7e0f      	ldrb	r7, [r1, #24]
 8001c8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c8c:	2f78      	cmp	r7, #120	; 0x78
 8001c8e:	4691      	mov	r9, r2
 8001c90:	4680      	mov	r8, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	469a      	mov	sl, r3
 8001c96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c9a:	d807      	bhi.n	8001cac <_printf_i+0x28>
 8001c9c:	2f62      	cmp	r7, #98	; 0x62
 8001c9e:	d80a      	bhi.n	8001cb6 <_printf_i+0x32>
 8001ca0:	2f00      	cmp	r7, #0
 8001ca2:	f000 80d8 	beq.w	8001e56 <_printf_i+0x1d2>
 8001ca6:	2f58      	cmp	r7, #88	; 0x58
 8001ca8:	f000 80a3 	beq.w	8001df2 <_printf_i+0x16e>
 8001cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cb4:	e03a      	b.n	8001d2c <_printf_i+0xa8>
 8001cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cba:	2b15      	cmp	r3, #21
 8001cbc:	d8f6      	bhi.n	8001cac <_printf_i+0x28>
 8001cbe:	a101      	add	r1, pc, #4	; (adr r1, 8001cc4 <_printf_i+0x40>)
 8001cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cc4:	08001d1d 	.word	0x08001d1d
 8001cc8:	08001d31 	.word	0x08001d31
 8001ccc:	08001cad 	.word	0x08001cad
 8001cd0:	08001cad 	.word	0x08001cad
 8001cd4:	08001cad 	.word	0x08001cad
 8001cd8:	08001cad 	.word	0x08001cad
 8001cdc:	08001d31 	.word	0x08001d31
 8001ce0:	08001cad 	.word	0x08001cad
 8001ce4:	08001cad 	.word	0x08001cad
 8001ce8:	08001cad 	.word	0x08001cad
 8001cec:	08001cad 	.word	0x08001cad
 8001cf0:	08001e3d 	.word	0x08001e3d
 8001cf4:	08001d61 	.word	0x08001d61
 8001cf8:	08001e1f 	.word	0x08001e1f
 8001cfc:	08001cad 	.word	0x08001cad
 8001d00:	08001cad 	.word	0x08001cad
 8001d04:	08001e5f 	.word	0x08001e5f
 8001d08:	08001cad 	.word	0x08001cad
 8001d0c:	08001d61 	.word	0x08001d61
 8001d10:	08001cad 	.word	0x08001cad
 8001d14:	08001cad 	.word	0x08001cad
 8001d18:	08001e27 	.word	0x08001e27
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	1d1a      	adds	r2, r3, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	602a      	str	r2, [r5, #0]
 8001d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0a3      	b.n	8001e78 <_printf_i+0x1f4>
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	6829      	ldr	r1, [r5, #0]
 8001d34:	0606      	lsls	r6, r0, #24
 8001d36:	f101 0304 	add.w	r3, r1, #4
 8001d3a:	d50a      	bpl.n	8001d52 <_printf_i+0xce>
 8001d3c:	680e      	ldr	r6, [r1, #0]
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	2e00      	cmp	r6, #0
 8001d42:	da03      	bge.n	8001d4c <_printf_i+0xc8>
 8001d44:	232d      	movs	r3, #45	; 0x2d
 8001d46:	4276      	negs	r6, r6
 8001d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d4c:	485e      	ldr	r0, [pc, #376]	; (8001ec8 <_printf_i+0x244>)
 8001d4e:	230a      	movs	r3, #10
 8001d50:	e019      	b.n	8001d86 <_printf_i+0x102>
 8001d52:	680e      	ldr	r6, [r1, #0]
 8001d54:	602b      	str	r3, [r5, #0]
 8001d56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d5a:	bf18      	it	ne
 8001d5c:	b236      	sxthne	r6, r6
 8001d5e:	e7ef      	b.n	8001d40 <_printf_i+0xbc>
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	6820      	ldr	r0, [r4, #0]
 8001d64:	1d19      	adds	r1, r3, #4
 8001d66:	6029      	str	r1, [r5, #0]
 8001d68:	0601      	lsls	r1, r0, #24
 8001d6a:	d501      	bpl.n	8001d70 <_printf_i+0xec>
 8001d6c:	681e      	ldr	r6, [r3, #0]
 8001d6e:	e002      	b.n	8001d76 <_printf_i+0xf2>
 8001d70:	0646      	lsls	r6, r0, #25
 8001d72:	d5fb      	bpl.n	8001d6c <_printf_i+0xe8>
 8001d74:	881e      	ldrh	r6, [r3, #0]
 8001d76:	4854      	ldr	r0, [pc, #336]	; (8001ec8 <_printf_i+0x244>)
 8001d78:	2f6f      	cmp	r7, #111	; 0x6f
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2308      	moveq	r3, #8
 8001d7e:	230a      	movne	r3, #10
 8001d80:	2100      	movs	r1, #0
 8001d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d86:	6865      	ldr	r5, [r4, #4]
 8001d88:	60a5      	str	r5, [r4, #8]
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	bfa2      	ittt	ge
 8001d8e:	6821      	ldrge	r1, [r4, #0]
 8001d90:	f021 0104 	bicge.w	r1, r1, #4
 8001d94:	6021      	strge	r1, [r4, #0]
 8001d96:	b90e      	cbnz	r6, 8001d9c <_printf_i+0x118>
 8001d98:	2d00      	cmp	r5, #0
 8001d9a:	d04d      	beq.n	8001e38 <_printf_i+0x1b4>
 8001d9c:	4615      	mov	r5, r2
 8001d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001da2:	fb03 6711 	mls	r7, r3, r1, r6
 8001da6:	5dc7      	ldrb	r7, [r0, r7]
 8001da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001dac:	4637      	mov	r7, r6
 8001dae:	42bb      	cmp	r3, r7
 8001db0:	460e      	mov	r6, r1
 8001db2:	d9f4      	bls.n	8001d9e <_printf_i+0x11a>
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d10b      	bne.n	8001dd0 <_printf_i+0x14c>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	07de      	lsls	r6, r3, #31
 8001dbc:	d508      	bpl.n	8001dd0 <_printf_i+0x14c>
 8001dbe:	6923      	ldr	r3, [r4, #16]
 8001dc0:	6861      	ldr	r1, [r4, #4]
 8001dc2:	4299      	cmp	r1, r3
 8001dc4:	bfde      	ittt	le
 8001dc6:	2330      	movle	r3, #48	; 0x30
 8001dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dd0:	1b52      	subs	r2, r2, r5
 8001dd2:	6122      	str	r2, [r4, #16]
 8001dd4:	f8cd a000 	str.w	sl, [sp]
 8001dd8:	464b      	mov	r3, r9
 8001dda:	aa03      	add	r2, sp, #12
 8001ddc:	4621      	mov	r1, r4
 8001dde:	4640      	mov	r0, r8
 8001de0:	f7ff fee2 	bl	8001ba8 <_printf_common>
 8001de4:	3001      	adds	r0, #1
 8001de6:	d14c      	bne.n	8001e82 <_printf_i+0x1fe>
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	b004      	add	sp, #16
 8001dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df2:	4835      	ldr	r0, [pc, #212]	; (8001ec8 <_printf_i+0x244>)
 8001df4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001df8:	6829      	ldr	r1, [r5, #0]
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e00:	6029      	str	r1, [r5, #0]
 8001e02:	061d      	lsls	r5, r3, #24
 8001e04:	d514      	bpl.n	8001e30 <_printf_i+0x1ac>
 8001e06:	07df      	lsls	r7, r3, #31
 8001e08:	bf44      	itt	mi
 8001e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8001e0e:	6023      	strmi	r3, [r4, #0]
 8001e10:	b91e      	cbnz	r6, 8001e1a <_printf_i+0x196>
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	f023 0320 	bic.w	r3, r3, #32
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	e7b0      	b.n	8001d80 <_printf_i+0xfc>
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	f043 0320 	orr.w	r3, r3, #32
 8001e24:	6023      	str	r3, [r4, #0]
 8001e26:	2378      	movs	r3, #120	; 0x78
 8001e28:	4828      	ldr	r0, [pc, #160]	; (8001ecc <_printf_i+0x248>)
 8001e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e2e:	e7e3      	b.n	8001df8 <_printf_i+0x174>
 8001e30:	0659      	lsls	r1, r3, #25
 8001e32:	bf48      	it	mi
 8001e34:	b2b6      	uxthmi	r6, r6
 8001e36:	e7e6      	b.n	8001e06 <_printf_i+0x182>
 8001e38:	4615      	mov	r5, r2
 8001e3a:	e7bb      	b.n	8001db4 <_printf_i+0x130>
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	6826      	ldr	r6, [r4, #0]
 8001e40:	6961      	ldr	r1, [r4, #20]
 8001e42:	1d18      	adds	r0, r3, #4
 8001e44:	6028      	str	r0, [r5, #0]
 8001e46:	0635      	lsls	r5, r6, #24
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	d501      	bpl.n	8001e50 <_printf_i+0x1cc>
 8001e4c:	6019      	str	r1, [r3, #0]
 8001e4e:	e002      	b.n	8001e56 <_printf_i+0x1d2>
 8001e50:	0670      	lsls	r0, r6, #25
 8001e52:	d5fb      	bpl.n	8001e4c <_printf_i+0x1c8>
 8001e54:	8019      	strh	r1, [r3, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	6123      	str	r3, [r4, #16]
 8001e5a:	4615      	mov	r5, r2
 8001e5c:	e7ba      	b.n	8001dd4 <_printf_i+0x150>
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	1d1a      	adds	r2, r3, #4
 8001e62:	602a      	str	r2, [r5, #0]
 8001e64:	681d      	ldr	r5, [r3, #0]
 8001e66:	6862      	ldr	r2, [r4, #4]
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	f7fe f9b0 	bl	80001d0 <memchr>
 8001e70:	b108      	cbz	r0, 8001e76 <_printf_i+0x1f2>
 8001e72:	1b40      	subs	r0, r0, r5
 8001e74:	6060      	str	r0, [r4, #4]
 8001e76:	6863      	ldr	r3, [r4, #4]
 8001e78:	6123      	str	r3, [r4, #16]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e80:	e7a8      	b.n	8001dd4 <_printf_i+0x150>
 8001e82:	6923      	ldr	r3, [r4, #16]
 8001e84:	462a      	mov	r2, r5
 8001e86:	4649      	mov	r1, r9
 8001e88:	4640      	mov	r0, r8
 8001e8a:	47d0      	blx	sl
 8001e8c:	3001      	adds	r0, #1
 8001e8e:	d0ab      	beq.n	8001de8 <_printf_i+0x164>
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	079b      	lsls	r3, r3, #30
 8001e94:	d413      	bmi.n	8001ebe <_printf_i+0x23a>
 8001e96:	68e0      	ldr	r0, [r4, #12]
 8001e98:	9b03      	ldr	r3, [sp, #12]
 8001e9a:	4298      	cmp	r0, r3
 8001e9c:	bfb8      	it	lt
 8001e9e:	4618      	movlt	r0, r3
 8001ea0:	e7a4      	b.n	8001dec <_printf_i+0x168>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	4632      	mov	r2, r6
 8001ea6:	4649      	mov	r1, r9
 8001ea8:	4640      	mov	r0, r8
 8001eaa:	47d0      	blx	sl
 8001eac:	3001      	adds	r0, #1
 8001eae:	d09b      	beq.n	8001de8 <_printf_i+0x164>
 8001eb0:	3501      	adds	r5, #1
 8001eb2:	68e3      	ldr	r3, [r4, #12]
 8001eb4:	9903      	ldr	r1, [sp, #12]
 8001eb6:	1a5b      	subs	r3, r3, r1
 8001eb8:	42ab      	cmp	r3, r5
 8001eba:	dcf2      	bgt.n	8001ea2 <_printf_i+0x21e>
 8001ebc:	e7eb      	b.n	8001e96 <_printf_i+0x212>
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	f104 0619 	add.w	r6, r4, #25
 8001ec4:	e7f5      	b.n	8001eb2 <_printf_i+0x22e>
 8001ec6:	bf00      	nop
 8001ec8:	080024c1 	.word	0x080024c1
 8001ecc:	080024d2 	.word	0x080024d2

08001ed0 <_putc_r>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	4606      	mov	r6, r0
 8001ed8:	b118      	cbz	r0, 8001ee2 <_putc_r+0x12>
 8001eda:	6983      	ldr	r3, [r0, #24]
 8001edc:	b90b      	cbnz	r3, 8001ee2 <_putc_r+0x12>
 8001ede:	f7ff faf7 	bl	80014d0 <__sinit>
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <_putc_r+0x84>)
 8001ee4:	429c      	cmp	r4, r3
 8001ee6:	d124      	bne.n	8001f32 <_putc_r+0x62>
 8001ee8:	6874      	ldr	r4, [r6, #4]
 8001eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001eec:	07d8      	lsls	r0, r3, #31
 8001eee:	d405      	bmi.n	8001efc <_putc_r+0x2c>
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	0599      	lsls	r1, r3, #22
 8001ef4:	d402      	bmi.n	8001efc <_putc_r+0x2c>
 8001ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ef8:	f7ff fbad 	bl	8001656 <__retarget_lock_acquire_recursive>
 8001efc:	68a3      	ldr	r3, [r4, #8]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	60a3      	str	r3, [r4, #8]
 8001f04:	da05      	bge.n	8001f12 <_putc_r+0x42>
 8001f06:	69a2      	ldr	r2, [r4, #24]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	db1c      	blt.n	8001f46 <_putc_r+0x76>
 8001f0c:	b2eb      	uxtb	r3, r5
 8001f0e:	2b0a      	cmp	r3, #10
 8001f10:	d019      	beq.n	8001f46 <_putc_r+0x76>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	6022      	str	r2, [r4, #0]
 8001f18:	701d      	strb	r5, [r3, #0]
 8001f1a:	b2ed      	uxtb	r5, r5
 8001f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f1e:	07da      	lsls	r2, r3, #31
 8001f20:	d405      	bmi.n	8001f2e <_putc_r+0x5e>
 8001f22:	89a3      	ldrh	r3, [r4, #12]
 8001f24:	059b      	lsls	r3, r3, #22
 8001f26:	d402      	bmi.n	8001f2e <_putc_r+0x5e>
 8001f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f2a:	f7ff fb95 	bl	8001658 <__retarget_lock_release_recursive>
 8001f2e:	4628      	mov	r0, r5
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <_putc_r+0x88>)
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d101      	bne.n	8001f3c <_putc_r+0x6c>
 8001f38:	68b4      	ldr	r4, [r6, #8]
 8001f3a:	e7d6      	b.n	8001eea <_putc_r+0x1a>
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <_putc_r+0x8c>)
 8001f3e:	429c      	cmp	r4, r3
 8001f40:	bf08      	it	eq
 8001f42:	68f4      	ldreq	r4, [r6, #12]
 8001f44:	e7d1      	b.n	8001eea <_putc_r+0x1a>
 8001f46:	4629      	mov	r1, r5
 8001f48:	4622      	mov	r2, r4
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	f000 f85c 	bl	8002008 <__swbuf_r>
 8001f50:	4605      	mov	r5, r0
 8001f52:	e7e3      	b.n	8001f1c <_putc_r+0x4c>
 8001f54:	08002470 	.word	0x08002470
 8001f58:	08002490 	.word	0x08002490
 8001f5c:	08002450 	.word	0x08002450

08001f60 <_sbrk_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4d06      	ldr	r5, [pc, #24]	; (8001f7c <_sbrk_r+0x1c>)
 8001f64:	2300      	movs	r3, #0
 8001f66:	4604      	mov	r4, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	602b      	str	r3, [r5, #0]
 8001f6c:	f7fe fe5c 	bl	8000c28 <_sbrk>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d102      	bne.n	8001f7a <_sbrk_r+0x1a>
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	b103      	cbz	r3, 8001f7a <_sbrk_r+0x1a>
 8001f78:	6023      	str	r3, [r4, #0]
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
 8001f7c:	200000bc 	.word	0x200000bc

08001f80 <__sread>:
 8001f80:	b510      	push	{r4, lr}
 8001f82:	460c      	mov	r4, r1
 8001f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f88:	f000 f956 	bl	8002238 <_read_r>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	bfab      	itete	ge
 8001f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f92:	89a3      	ldrhlt	r3, [r4, #12]
 8001f94:	181b      	addge	r3, r3, r0
 8001f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f9a:	bfac      	ite	ge
 8001f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f9e:	81a3      	strhlt	r3, [r4, #12]
 8001fa0:	bd10      	pop	{r4, pc}

08001fa2 <__swrite>:
 8001fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa6:	461f      	mov	r7, r3
 8001fa8:	898b      	ldrh	r3, [r1, #12]
 8001faa:	05db      	lsls	r3, r3, #23
 8001fac:	4605      	mov	r5, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	4616      	mov	r6, r2
 8001fb2:	d505      	bpl.n	8001fc0 <__swrite+0x1e>
 8001fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f000 f91e 	bl	80021fc <_lseek_r>
 8001fc0:	89a3      	ldrh	r3, [r4, #12]
 8001fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fca:	81a3      	strh	r3, [r4, #12]
 8001fcc:	4632      	mov	r2, r6
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd6:	f7fe bc01 	b.w	80007dc <_write_r>

08001fda <__sseek>:
 8001fda:	b510      	push	{r4, lr}
 8001fdc:	460c      	mov	r4, r1
 8001fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe2:	f000 f90b 	bl	80021fc <_lseek_r>
 8001fe6:	1c43      	adds	r3, r0, #1
 8001fe8:	89a3      	ldrh	r3, [r4, #12]
 8001fea:	bf15      	itete	ne
 8001fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ff6:	81a3      	strheq	r3, [r4, #12]
 8001ff8:	bf18      	it	ne
 8001ffa:	81a3      	strhne	r3, [r4, #12]
 8001ffc:	bd10      	pop	{r4, pc}

08001ffe <__sclose>:
 8001ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002002:	f000 b8c9 	b.w	8002198 <_close_r>
	...

08002008 <__swbuf_r>:
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200a:	460e      	mov	r6, r1
 800200c:	4614      	mov	r4, r2
 800200e:	4605      	mov	r5, r0
 8002010:	b118      	cbz	r0, 800201a <__swbuf_r+0x12>
 8002012:	6983      	ldr	r3, [r0, #24]
 8002014:	b90b      	cbnz	r3, 800201a <__swbuf_r+0x12>
 8002016:	f7ff fa5b 	bl	80014d0 <__sinit>
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <__swbuf_r+0x98>)
 800201c:	429c      	cmp	r4, r3
 800201e:	d12b      	bne.n	8002078 <__swbuf_r+0x70>
 8002020:	686c      	ldr	r4, [r5, #4]
 8002022:	69a3      	ldr	r3, [r4, #24]
 8002024:	60a3      	str	r3, [r4, #8]
 8002026:	89a3      	ldrh	r3, [r4, #12]
 8002028:	071a      	lsls	r2, r3, #28
 800202a:	d52f      	bpl.n	800208c <__swbuf_r+0x84>
 800202c:	6923      	ldr	r3, [r4, #16]
 800202e:	b36b      	cbz	r3, 800208c <__swbuf_r+0x84>
 8002030:	6923      	ldr	r3, [r4, #16]
 8002032:	6820      	ldr	r0, [r4, #0]
 8002034:	1ac0      	subs	r0, r0, r3
 8002036:	6963      	ldr	r3, [r4, #20]
 8002038:	b2f6      	uxtb	r6, r6
 800203a:	4283      	cmp	r3, r0
 800203c:	4637      	mov	r7, r6
 800203e:	dc04      	bgt.n	800204a <__swbuf_r+0x42>
 8002040:	4621      	mov	r1, r4
 8002042:	4628      	mov	r0, r5
 8002044:	f7ff f9b0 	bl	80013a8 <_fflush_r>
 8002048:	bb30      	cbnz	r0, 8002098 <__swbuf_r+0x90>
 800204a:	68a3      	ldr	r3, [r4, #8]
 800204c:	3b01      	subs	r3, #1
 800204e:	60a3      	str	r3, [r4, #8]
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	6022      	str	r2, [r4, #0]
 8002056:	701e      	strb	r6, [r3, #0]
 8002058:	6963      	ldr	r3, [r4, #20]
 800205a:	3001      	adds	r0, #1
 800205c:	4283      	cmp	r3, r0
 800205e:	d004      	beq.n	800206a <__swbuf_r+0x62>
 8002060:	89a3      	ldrh	r3, [r4, #12]
 8002062:	07db      	lsls	r3, r3, #31
 8002064:	d506      	bpl.n	8002074 <__swbuf_r+0x6c>
 8002066:	2e0a      	cmp	r6, #10
 8002068:	d104      	bne.n	8002074 <__swbuf_r+0x6c>
 800206a:	4621      	mov	r1, r4
 800206c:	4628      	mov	r0, r5
 800206e:	f7ff f99b 	bl	80013a8 <_fflush_r>
 8002072:	b988      	cbnz	r0, 8002098 <__swbuf_r+0x90>
 8002074:	4638      	mov	r0, r7
 8002076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <__swbuf_r+0x9c>)
 800207a:	429c      	cmp	r4, r3
 800207c:	d101      	bne.n	8002082 <__swbuf_r+0x7a>
 800207e:	68ac      	ldr	r4, [r5, #8]
 8002080:	e7cf      	b.n	8002022 <__swbuf_r+0x1a>
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <__swbuf_r+0xa0>)
 8002084:	429c      	cmp	r4, r3
 8002086:	bf08      	it	eq
 8002088:	68ec      	ldreq	r4, [r5, #12]
 800208a:	e7ca      	b.n	8002022 <__swbuf_r+0x1a>
 800208c:	4621      	mov	r1, r4
 800208e:	4628      	mov	r0, r5
 8002090:	f000 f80c 	bl	80020ac <__swsetup_r>
 8002094:	2800      	cmp	r0, #0
 8002096:	d0cb      	beq.n	8002030 <__swbuf_r+0x28>
 8002098:	f04f 37ff 	mov.w	r7, #4294967295
 800209c:	e7ea      	b.n	8002074 <__swbuf_r+0x6c>
 800209e:	bf00      	nop
 80020a0:	08002470 	.word	0x08002470
 80020a4:	08002490 	.word	0x08002490
 80020a8:	08002450 	.word	0x08002450

080020ac <__swsetup_r>:
 80020ac:	4b32      	ldr	r3, [pc, #200]	; (8002178 <__swsetup_r+0xcc>)
 80020ae:	b570      	push	{r4, r5, r6, lr}
 80020b0:	681d      	ldr	r5, [r3, #0]
 80020b2:	4606      	mov	r6, r0
 80020b4:	460c      	mov	r4, r1
 80020b6:	b125      	cbz	r5, 80020c2 <__swsetup_r+0x16>
 80020b8:	69ab      	ldr	r3, [r5, #24]
 80020ba:	b913      	cbnz	r3, 80020c2 <__swsetup_r+0x16>
 80020bc:	4628      	mov	r0, r5
 80020be:	f7ff fa07 	bl	80014d0 <__sinit>
 80020c2:	4b2e      	ldr	r3, [pc, #184]	; (800217c <__swsetup_r+0xd0>)
 80020c4:	429c      	cmp	r4, r3
 80020c6:	d10f      	bne.n	80020e8 <__swsetup_r+0x3c>
 80020c8:	686c      	ldr	r4, [r5, #4]
 80020ca:	89a3      	ldrh	r3, [r4, #12]
 80020cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020d0:	0719      	lsls	r1, r3, #28
 80020d2:	d42c      	bmi.n	800212e <__swsetup_r+0x82>
 80020d4:	06dd      	lsls	r5, r3, #27
 80020d6:	d411      	bmi.n	80020fc <__swsetup_r+0x50>
 80020d8:	2309      	movs	r3, #9
 80020da:	6033      	str	r3, [r6, #0]
 80020dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020e0:	81a3      	strh	r3, [r4, #12]
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295
 80020e6:	e03e      	b.n	8002166 <__swsetup_r+0xba>
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <__swsetup_r+0xd4>)
 80020ea:	429c      	cmp	r4, r3
 80020ec:	d101      	bne.n	80020f2 <__swsetup_r+0x46>
 80020ee:	68ac      	ldr	r4, [r5, #8]
 80020f0:	e7eb      	b.n	80020ca <__swsetup_r+0x1e>
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <__swsetup_r+0xd8>)
 80020f4:	429c      	cmp	r4, r3
 80020f6:	bf08      	it	eq
 80020f8:	68ec      	ldreq	r4, [r5, #12]
 80020fa:	e7e6      	b.n	80020ca <__swsetup_r+0x1e>
 80020fc:	0758      	lsls	r0, r3, #29
 80020fe:	d512      	bpl.n	8002126 <__swsetup_r+0x7a>
 8002100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002102:	b141      	cbz	r1, 8002116 <__swsetup_r+0x6a>
 8002104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002108:	4299      	cmp	r1, r3
 800210a:	d002      	beq.n	8002112 <__swsetup_r+0x66>
 800210c:	4630      	mov	r0, r6
 800210e:	f7ff fb11 	bl	8001734 <_free_r>
 8002112:	2300      	movs	r3, #0
 8002114:	6363      	str	r3, [r4, #52]	; 0x34
 8002116:	89a3      	ldrh	r3, [r4, #12]
 8002118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800211c:	81a3      	strh	r3, [r4, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	6063      	str	r3, [r4, #4]
 8002122:	6923      	ldr	r3, [r4, #16]
 8002124:	6023      	str	r3, [r4, #0]
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	81a3      	strh	r3, [r4, #12]
 800212e:	6923      	ldr	r3, [r4, #16]
 8002130:	b94b      	cbnz	r3, 8002146 <__swsetup_r+0x9a>
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213c:	d003      	beq.n	8002146 <__swsetup_r+0x9a>
 800213e:	4621      	mov	r1, r4
 8002140:	4630      	mov	r0, r6
 8002142:	f7ff faaf 	bl	80016a4 <__smakebuf_r>
 8002146:	89a0      	ldrh	r0, [r4, #12]
 8002148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800214c:	f010 0301 	ands.w	r3, r0, #1
 8002150:	d00a      	beq.n	8002168 <__swsetup_r+0xbc>
 8002152:	2300      	movs	r3, #0
 8002154:	60a3      	str	r3, [r4, #8]
 8002156:	6963      	ldr	r3, [r4, #20]
 8002158:	425b      	negs	r3, r3
 800215a:	61a3      	str	r3, [r4, #24]
 800215c:	6923      	ldr	r3, [r4, #16]
 800215e:	b943      	cbnz	r3, 8002172 <__swsetup_r+0xc6>
 8002160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002164:	d1ba      	bne.n	80020dc <__swsetup_r+0x30>
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	0781      	lsls	r1, r0, #30
 800216a:	bf58      	it	pl
 800216c:	6963      	ldrpl	r3, [r4, #20]
 800216e:	60a3      	str	r3, [r4, #8]
 8002170:	e7f4      	b.n	800215c <__swsetup_r+0xb0>
 8002172:	2000      	movs	r0, #0
 8002174:	e7f7      	b.n	8002166 <__swsetup_r+0xba>
 8002176:	bf00      	nop
 8002178:	2000002c 	.word	0x2000002c
 800217c:	08002470 	.word	0x08002470
 8002180:	08002490 	.word	0x08002490
 8002184:	08002450 	.word	0x08002450

08002188 <abort>:
 8002188:	b508      	push	{r3, lr}
 800218a:	2006      	movs	r0, #6
 800218c:	f000 f88e 	bl	80022ac <raise>
 8002190:	2001      	movs	r0, #1
 8002192:	f7fe fcee 	bl	8000b72 <_exit>
	...

08002198 <_close_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4d06      	ldr	r5, [pc, #24]	; (80021b4 <_close_r+0x1c>)
 800219c:	2300      	movs	r3, #0
 800219e:	4604      	mov	r4, r0
 80021a0:	4608      	mov	r0, r1
 80021a2:	602b      	str	r3, [r5, #0]
 80021a4:	f7fe fd0c 	bl	8000bc0 <_close>
 80021a8:	1c43      	adds	r3, r0, #1
 80021aa:	d102      	bne.n	80021b2 <_close_r+0x1a>
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	b103      	cbz	r3, 80021b2 <_close_r+0x1a>
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	bd38      	pop	{r3, r4, r5, pc}
 80021b4:	200000bc 	.word	0x200000bc

080021b8 <_fstat_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4d07      	ldr	r5, [pc, #28]	; (80021d8 <_fstat_r+0x20>)
 80021bc:	2300      	movs	r3, #0
 80021be:	4604      	mov	r4, r0
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	f7fe fd07 	bl	8000bd8 <_fstat>
 80021ca:	1c43      	adds	r3, r0, #1
 80021cc:	d102      	bne.n	80021d4 <_fstat_r+0x1c>
 80021ce:	682b      	ldr	r3, [r5, #0]
 80021d0:	b103      	cbz	r3, 80021d4 <_fstat_r+0x1c>
 80021d2:	6023      	str	r3, [r4, #0]
 80021d4:	bd38      	pop	{r3, r4, r5, pc}
 80021d6:	bf00      	nop
 80021d8:	200000bc 	.word	0x200000bc

080021dc <_isatty_r>:
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4d06      	ldr	r5, [pc, #24]	; (80021f8 <_isatty_r+0x1c>)
 80021e0:	2300      	movs	r3, #0
 80021e2:	4604      	mov	r4, r0
 80021e4:	4608      	mov	r0, r1
 80021e6:	602b      	str	r3, [r5, #0]
 80021e8:	f7fe fd06 	bl	8000bf8 <_isatty>
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	d102      	bne.n	80021f6 <_isatty_r+0x1a>
 80021f0:	682b      	ldr	r3, [r5, #0]
 80021f2:	b103      	cbz	r3, 80021f6 <_isatty_r+0x1a>
 80021f4:	6023      	str	r3, [r4, #0]
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
 80021f8:	200000bc 	.word	0x200000bc

080021fc <_lseek_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4d07      	ldr	r5, [pc, #28]	; (800221c <_lseek_r+0x20>)
 8002200:	4604      	mov	r4, r0
 8002202:	4608      	mov	r0, r1
 8002204:	4611      	mov	r1, r2
 8002206:	2200      	movs	r2, #0
 8002208:	602a      	str	r2, [r5, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	f7fe fcff 	bl	8000c0e <_lseek>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d102      	bne.n	800221a <_lseek_r+0x1e>
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	b103      	cbz	r3, 800221a <_lseek_r+0x1e>
 8002218:	6023      	str	r3, [r4, #0]
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	200000bc 	.word	0x200000bc

08002220 <__malloc_lock>:
 8002220:	4801      	ldr	r0, [pc, #4]	; (8002228 <__malloc_lock+0x8>)
 8002222:	f7ff ba18 	b.w	8001656 <__retarget_lock_acquire_recursive>
 8002226:	bf00      	nop
 8002228:	200000b0 	.word	0x200000b0

0800222c <__malloc_unlock>:
 800222c:	4801      	ldr	r0, [pc, #4]	; (8002234 <__malloc_unlock+0x8>)
 800222e:	f7ff ba13 	b.w	8001658 <__retarget_lock_release_recursive>
 8002232:	bf00      	nop
 8002234:	200000b0 	.word	0x200000b0

08002238 <_read_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	4d07      	ldr	r5, [pc, #28]	; (8002258 <_read_r+0x20>)
 800223c:	4604      	mov	r4, r0
 800223e:	4608      	mov	r0, r1
 8002240:	4611      	mov	r1, r2
 8002242:	2200      	movs	r2, #0
 8002244:	602a      	str	r2, [r5, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f7fe fc9d 	bl	8000b86 <_read>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_read_r+0x1e>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	b103      	cbz	r3, 8002256 <_read_r+0x1e>
 8002254:	6023      	str	r3, [r4, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	200000bc 	.word	0x200000bc

0800225c <_raise_r>:
 800225c:	291f      	cmp	r1, #31
 800225e:	b538      	push	{r3, r4, r5, lr}
 8002260:	4604      	mov	r4, r0
 8002262:	460d      	mov	r5, r1
 8002264:	d904      	bls.n	8002270 <_raise_r+0x14>
 8002266:	2316      	movs	r3, #22
 8002268:	6003      	str	r3, [r0, #0]
 800226a:	f04f 30ff 	mov.w	r0, #4294967295
 800226e:	bd38      	pop	{r3, r4, r5, pc}
 8002270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002272:	b112      	cbz	r2, 800227a <_raise_r+0x1e>
 8002274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002278:	b94b      	cbnz	r3, 800228e <_raise_r+0x32>
 800227a:	4620      	mov	r0, r4
 800227c:	f000 f830 	bl	80022e0 <_getpid_r>
 8002280:	462a      	mov	r2, r5
 8002282:	4601      	mov	r1, r0
 8002284:	4620      	mov	r0, r4
 8002286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800228a:	f000 b817 	b.w	80022bc <_kill_r>
 800228e:	2b01      	cmp	r3, #1
 8002290:	d00a      	beq.n	80022a8 <_raise_r+0x4c>
 8002292:	1c59      	adds	r1, r3, #1
 8002294:	d103      	bne.n	800229e <_raise_r+0x42>
 8002296:	2316      	movs	r3, #22
 8002298:	6003      	str	r3, [r0, #0]
 800229a:	2001      	movs	r0, #1
 800229c:	e7e7      	b.n	800226e <_raise_r+0x12>
 800229e:	2400      	movs	r4, #0
 80022a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80022a4:	4628      	mov	r0, r5
 80022a6:	4798      	blx	r3
 80022a8:	2000      	movs	r0, #0
 80022aa:	e7e0      	b.n	800226e <_raise_r+0x12>

080022ac <raise>:
 80022ac:	4b02      	ldr	r3, [pc, #8]	; (80022b8 <raise+0xc>)
 80022ae:	4601      	mov	r1, r0
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	f7ff bfd3 	b.w	800225c <_raise_r>
 80022b6:	bf00      	nop
 80022b8:	2000002c 	.word	0x2000002c

080022bc <_kill_r>:
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	4d07      	ldr	r5, [pc, #28]	; (80022dc <_kill_r+0x20>)
 80022c0:	2300      	movs	r3, #0
 80022c2:	4604      	mov	r4, r0
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	602b      	str	r3, [r5, #0]
 80022ca:	f7fe fc42 	bl	8000b52 <_kill>
 80022ce:	1c43      	adds	r3, r0, #1
 80022d0:	d102      	bne.n	80022d8 <_kill_r+0x1c>
 80022d2:	682b      	ldr	r3, [r5, #0]
 80022d4:	b103      	cbz	r3, 80022d8 <_kill_r+0x1c>
 80022d6:	6023      	str	r3, [r4, #0]
 80022d8:	bd38      	pop	{r3, r4, r5, pc}
 80022da:	bf00      	nop
 80022dc:	200000bc 	.word	0x200000bc

080022e0 <_getpid_r>:
 80022e0:	f7fe bc2f 	b.w	8000b42 <_getpid>

080022e4 <_gettimeofday>:
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <_gettimeofday+0xc>)
 80022e6:	2258      	movs	r2, #88	; 0x58
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f04f 30ff 	mov.w	r0, #4294967295
 80022ee:	4770      	bx	lr
 80022f0:	200000bc 	.word	0x200000bc

080022f4 <_init>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr

08002300 <_fini>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr
